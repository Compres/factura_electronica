

var net_fuel_tally = 0;
var net_goods_tally = 0;
var net_services_tally = 0;
var sales_tax_temp;
console.log("The sales tax temp is :" + sales_tax_temp);

frappe.ui.form.on("Sales Invoice", {
    onload: function onload(frm) {},
    onload_post_render: function onload_post_render(frm) {
        console.log("Setting the tax rate to a variable");
    },
    items: function items(frm) {
        console.log("Items have been updated, showing this!");
    }

});

frappe.ui.form.on("Sales Invoice Item", {
    fieldname_add: function fieldname_add(frm, cdt, cdn) {},

    fieldname_move: function fieldname_move(frm, cdt, cdn) {},
    fieldname_before_remove: function fieldname_before_remove(frm, cdt, cdn) {},
    fieldname_remove: function fieldname_remove(frm, cdt, cdn) {},

    onload: function onload(frm, cdt, cdn) {},

    refresh: function refresh(frm, cdt, cdn) {
        console.log("Fields were refreshed");
    },
    item_code: function item_code(frm, cdt, cdn) {
        frappe.run_serially([function () {
            return console.log("item_code field triggered the running of this code, without using frm.add_fetch");
        }]);
    },

    qty: function qty(frm, cdt, cdn) {
        console.log("The quantity field was changed and the code from the trigger was run");


        var this_row_qty, this_row_rate, this_row_amount, this_row_conversion_factor, this_row_stock_qty, this_row_tax_rate, this_row_tax_amount;
        frm.doc.items.forEach(function (item_row, index) {
            if (item_row.name == cdn) {
                this_row_qty = item_row.qty;
                this_row_rate = item_row.rate;
                this_row_amount = item_row.qty * item_row.rate;
                this_row_conversion_factor = item_row.conversion_factor;
                this_row_stock_qty = item_row.qty * item_row.conversion_factor;
                this_row_tax_rate = item_row.tax_rate_per_uom;
                this_row_tax_amount = this_row_stock_qty * this_row_tax_rate;
                this_row_taxable_amount = this_row_amount - this_row_tax_amount;

                frm.doc.items[index].other_tax_amount = (this_row_tax_rate * this_row_stock_qty).toFixed(2);
                frm.doc.items[index].amount_minus_excise_tax = (this_row_amount - this_row_tax_amount).toFixed(2);
            };
            if (item_row.is_fuel == 1) {
                console.log("The item you added is FUEL!" + item_row.is_fuel);

                net_fuel_tally = (this_row_taxable_amount / (1 + sales_tax_temp / 100)).toFixed(2);
                console.log("El valor en combustibles para el libro de compras es: " + net_fuel_tally);
                frm.doc.gt_tax_fuel = net_fuel_tally;
            };
            if (item_row.is_good == 1) {
                console.log("The item you added is a GOOD!" + item_row.is_good);

                net_goods_tally = (this_row_taxable_amount / (1 + sales_tax_temp / 100)).toFixed(2);
                frm.doc.gt_tax_goods = net_goods_tally;
            };
            if (item_row.is_service == 1) {
                console.log("The item you added is a SERVICE!" + item_row.is_service);

                net_services_tally = (this_row_taxable_amount / (1 + sales_tax_temp / 100)).toFixed(2);
                frm.doc.gt_tax_services = net_goods_tally;
            };
        });

        frappe.run_serially([function () {
            frm.doc.items.forEach(function (item_row, index) {
                if (item_row.name == cdn) {
                    console.log("Serially: The tax rate for this row " + this_row_tax_rate);

                    console.log("Serially: The stock quantity for this row is now: " + frm.doc.items[index].stock_qty);

                    frm.refresh_fields('items');

                    console.log("The index value (representing the actual row being iterated or worked upon) is: " + index);
                    console.log(this_row_tax_rate * frm.doc.items[index].stock_qty);
                }
            });
        }]);
    },
    uom: function uom(frm, cdt, cdn) {
        console.log("The unit of measure field was changed and the code from the trigger was run");
    },
    conversion_factor: function conversion_factor(frm, cdt, cdn) {
        console.log("El disparador de factor de conversión se corrió.");
    }
});

frappe.ui.form.on("Sales Invoice", "refresh", function (frm) {
    cur_frm.add_fetch("customer", "nit_face_customer", "nit_face_customer");

    function pdf_button() {
        frappe.call({
            method: "factura_electronica.api.save_url_pdf",

            callback: function callback(data) {

                if (data.message === 'Manual') {
                    console.log(data.message);
                    frm.add_custom_button(__("Obtener PDF"), function () {
                        var cae_fac = frm.doc.cae_factura_electronica;
                        var link_cae_pdf = "https://www.ingface.net/Ingfacereport/dtefactura.jsp?cae=";

                        window.open(link_cae_pdf + cae_fac);
                    }).addClass("btn-primary");
                } else {
                    console.log(data.message);
                    var cae_fac = frm.doc.cae_factura_electronica;
                    var link_cae_pdf = "https://www.ingface.net/Ingfacereport/dtefactura.jsp?cae=";

                    frappe.call({
                        method: "factura_electronica.api.save_pdf_server",
                        args: {
                            file_url: link_cae_pdf + cae_fac,
                            filename: frm.doc.name,
                            dt: 'Sales Invoice',
                            dn: frm.doc.name,
                            folder: 'Home/Facturas Electronicas',
                            is_private: 1
                        }
                    });
                }
            }
        });
    }

    if (frm.doc.status === "Paid" || frm.doc.status === "Unpaid" || frm.doc.status === "Submitted" || frm.doc.status === "Overdue") {
        if (frm.doc.cae_factura_electronica) {
            cur_frm.clear_custom_buttons();
            pdf_button();
        } else {
            var nombre = 'Factura Electronica';
            frm.add_custom_button(__(nombre), function () {
                frappe.call({
                    method: "factura_electronica.api.generar_factura_electronica",
                    args: {
                        serie_factura: frm.doc.name,
                        nombre_cliente: frm.doc.customer
                    },

                    callback: function callback(data) {
                        cur_frm.set_value("cae_factura_electronica", data.message);
                        if (frm.doc.cae_factura_electronica) {
                            cur_frm.clear_custom_buttons();
                            pdf_button();
                        }
                    }
                });
            }).addClass("btn-primary");
        }
    }

    if (frm.doc.status === "Return") {
        if (frm.doc.cae_nota_de_credito) {
            cur_frm.clear_custom_buttons();
            pdf_button();
        } else {
            frm.add_custom_button(__('Nota Credito'), function () {
                frappe.call({
                    method: "factura_electronica.api.generar_factura_electronica",
                    args: {
                        serie_factura: frm.doc.name,
                        nombre_cliente: frm.doc.customer
                    },

                    callback: function callback(data) {
                        cur_frm.set_value("cae_nota_de_credito", data.message);
                        if (frm.doc.cae_nota_de_credito) {
                            cur_frm.clear_custom_buttons();
                            pdf_button();
                        }
                    }
                });
            }).addClass("btn-primary");
        }
    }
});