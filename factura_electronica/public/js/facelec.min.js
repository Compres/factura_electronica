

facelec_tax_calculation_conversion = function facelec_tax_calculation_conversion(frm, cdt, cdn) {
    refresh_field('items');

    this_company_sales_tax_var = cur_frm.doc.taxes[0].rate;

    console.log("If you can see this, tax rate variable now exists, and its set to: " + this_company_sales_tax_var);

    var this_row_qty, this_row_rate, this_row_amount, this_row_conversion_factor, this_row_stock_qty, this_row_tax_rate, this_row_tax_amount, this_row_taxable_amount;

    frm.doc.items.forEach(function (item_row, index) {
        if (item_row.name == cdn) {
            this_row_amount = item_row.qty * item_row.rate;
            this_row_stock_qty = item_row.qty * item_row.conversion_factor;
            this_row_tax_rate = item_row.facelec_tax_rate_per_uom;
            this_row_tax_amount = this_row_stock_qty * this_row_tax_rate;
            this_row_taxable_amount = this_row_amount - this_row_tax_amount;

            frm.doc.items[index].facelec_other_tax_amount = item_row.facelec_tax_rate_per_uom * (item_row.qty * item_row.conversion_factor);

            frm.doc.items[index].facelec_amount_minus_excise_tax = item_row.qty * item_row.rate - item_row.qty * item_row.conversion_factor * item_row.facelec_tax_rate_per_uom;
            console.log("uom that just changed is: " + item_row.uom);
            console.log("stock qty is: " + item_row.stock_qty);
            console.log("conversion_factor is: " + item_row.conversion_factor);

            if (item_row.factelecis_fuel == 1) {
                frm.doc.items[index].facelec_gt_tax_net_fuel_amt = item_row.facelec_amount_minus_excise_tax / (1 + this_company_sales_tax_var / 100);
                frm.doc.items[index].facelec_sales_tax_for_this_row = item_row.facelec_gt_tax_net_fuel_amt * (this_company_sales_tax_var / 100);

                total_fuel = 0;
                $.each(frm.doc.items || [], function (i, d) {
                    if (d.factelecis_fuel == true) {
                        total_fuel += flt(d.facelec_gt_tax_net_fuel_amt);
                    };
                });

                frm.doc.facelec_gt_tax_fuel = total_fuel;
                frm.refresh_field("factelecis_fuel");
            };
            if (item_row.facelec_is_good == 1) {
                frm.doc.items[index].facelec_gt_tax_net_goods_amt = item_row.facelec_amount_minus_excise_tax / (1 + this_company_sales_tax_var / 100);
                frm.doc.items[index].facelec_sales_tax_for_this_row = item_row.facelec_gt_tax_net_goods_amt * (this_company_sales_tax_var / 100);

                total_goods = 0;
                $.each(frm.doc.items || [], function (i, d) {
                    if (d.facelec_is_good == true) {
                        total_goods += flt(d.facelec_gt_tax_net_goods_amt);
                    };
                });

                frm.doc.facelec_gt_tax_goods = total_goods;
            };
            if (item_row.facelec_is_service == 1) {
                frm.doc.items[index].facelec_gt_tax_net_service_amt = item_row.facelec_amount_minus_excise_tax / (1 + this_company_sales_tax_var / 100);
                frm.doc.items[index].facelec_sales_tax_for_this_row = item_row.facelec_gt_tax_net_service_amt * (this_company_sales_tax_var / 100);
                total_servi = 0;
                $.each(frm.doc.items || [], function (i, d) {
                    if (d.facelec_is_service == true) {
                        total_servi += flt(d.facelec_gt_tax_net_services_amt);
                    };
                });

                frm.doc.facelec_gt_tax_services = total_servi;
            };

            full_tax_iva = 0;
            $.each(frm.doc.items || [], function (i, d) {
                full_tax_iva += flt(d.facelec_sales_tax_for_this_row);
            });
            frm.doc.facelec_total_iva = full_tax_iva;
        };
    });
};

buscar_account = function buscar_account(frm, cuenta_b) {
    var estado = '';
    $.each(frm.doc.taxes || [], function (i, d) {
        if (d.account_head === cuenta_b) {
            console.log('Si Existe en el indice ' + i);
            estado = true;
        }
    });
    return estado;
};

function valNit(nit, cus_supp, frm) {
    if (nit === "C/F" || nit === "c/f") {
        frm.enable_save();
    } else {
        var nd,
            add = 0;
        if (nd = /^(\d+)\-?([\dk])$/i.exec(nit)) {
            nd[2] = nd[2].toLowerCase() == 'k' ? 10 : parseInt(nd[2]);
            for (var i = 0; i < nd[1].length; i++) {
                add += ((i - nd[1].length) * -1 + 1) * nd[1][i];
            }
            nit_validado = (11 - add % 11) % 11 == nd[2];
        } else {
            nit_validado = false;
        }

        if (nit_validado === false) {
            msgprint('NIT de: <b>' + cus_supp + '</b>, no es correcto. Si no tiene disponible el NIT modifiquelo a <b>C/F</b>');
            frm.disable_save();
        }
        if (nit_validado === true) {
            frm.enable_save();
        }
    }
}

frappe.ui.form.on("Sales Invoice", "nit_face_customer", function (frm) {
    valNit(frm.doc.nit_face_customer, frm.doc.customer, frm);
});

frappe.ui.form.on("Sales Invoice", "discount_amount", function (frm) {
    tax_before_calc = frm.doc.facelec_total_iva;
    console.log("El descuento total es:" + frm.doc.discount_amount);
    console.log("El IVA calculado anteriormente:" + frm.doc.facelec_total_iva);
    discount_amount_net_value = frm.doc.discount_amount / (1 + cur_frm.doc.taxes[0].rate / 100);
    console.log("El neto sin iva del descuento es" + discount_amount_net_value);
    discount_amount_tax_value = discount_amount_net_value * (cur_frm.doc.taxes[0].rate / 100);
    console.log("El IVA del descuento es:" + discount_amount_tax_value);
    frm.doc.facelec_total_iva = frm.doc.facelec_total_iva - discount_amount_tax_value;
    console.log("El IVA ya sin el iva del descuento es ahora:" + frm.doc.facelec_total_iva);
});

frappe.ui.form.on("Sales Invoice", "customer", function (frm) {
    this_company_sales_tax_var = cur_frm.doc.taxes[0].rate;
    console.log('Corrio customer trigger y se cargo el IVA, el cual es ' + this_company_sales_tax_var);
});


frappe.ui.form.on("Sales Invoice Item", {

    items_add: function items_add(frm, cdt, cdn) {},
    items_move: function items_move(frm, cdt, cdn) {},
    before_items_remove: function before_items_remove(frm, cdt, cdn) {},
    items_remove: function items_remove(frm, cdt, cdn) {
        fix_gt_tax_fuel = 0;
        fix_gt_tax_goods = 0;
        fix_gt_tax_services = 0;
        fix_gt_tax_iva = 0;

        $.each(frm.doc.items || [], function (i, d) {

            fix_gt_tax_fuel += flt(d.facelec_gt_tax_net_fuel_amt);
            fix_gt_tax_goods += flt(d.facelec_gt_tax_net_goods_amt);
            fix_gt_tax_services += flt(d.facelec_gt_tax_net_services_amt);
            fix_gt_tax_iva += flt(d.facelec_sales_tax_for_this_row);
        });

        cur_frm.set_value("facelec_gt_tax_fuel", fix_gt_tax_fuel);
        cur_frm.set_value("facelec_gt_tax_goods", fix_gt_tax_goods);
        cur_frm.set_value("facelec_gt_tax_services", fix_gt_tax_services);
        cur_frm.set_value("facelec_total_iva", fix_gt_tax_iva);
    },
    item_code: function item_code(frm, cdt, cdn) {
        this_company_sales_tax_var = cur_frm.doc.taxes[0].rate;
        console.log("If you can see this, tax rate variable now exists, and its set to: " + this_company_sales_tax_var);
        refresh_field('qty');
    },
    qty: function qty(frm, cdt, cdn) {
        facelec_tax_calculation_conversion(frm, cdt, cdn);
        console.log("cdt contains: " + cdt);
        console.log("cdn contains: " + cdn);
    },
    uom: function uom(frm, cdt, cdn) {
        console.log("The unit of measure field was changed and the code from the trigger was run");
    },
    conversion_factor: function conversion_factor(frm, cdt, cdn) {
        console.log("El disparador de factor de conversión se corrió.");
        facelec_tax_calculation_conversion(frm, cdt, cdn);
    },
    facelec_tax_rate_per_uom_account: function facelec_tax_rate_per_uom_account(frm, cdt, cdn) {

        frm.doc.items.forEach(function (item_row_i, index_i) {
            if (item_row_i.name == cdn) {

                var cuenta = item_row_i.facelec_tax_rate_per_uom_account;

                if (cuenta !== null) {
                    if (buscar_account(frm, cuenta)) {
                        console.log('La cuenta ya existe');
                    } else {
                        console.log('La cuenta no existe, se agregara una nueva fila en taxes');

                        frappe.model.add_child(frm.doc, "Sales Taxes and Charges", "taxes");

                        frm.doc.taxes.forEach(function (item_row, index) {
                            if (item_row.account_head == undefined) {
                                frappe.call({
                                    method: "factura_electronica.api.get_data_tax_account",
                                    args: {
                                        name_account_tax_gt: cuenta
                                    },

                                    callback: function callback(data) {
                                        frm.doc.taxes[index].charge_type = 'On Net Total';
                                        frm.doc.taxes[index].account_head = cuenta;
                                        frm.doc.taxes[index].rate = data.message;

                                        frm.doc.taxes[index].description = 'Impuesto';
                                    }
                                });
                            }
                        });
                    }
                } else {
                    console.log('El producto seleccionado no tiene una cuenta asociada');
                }
            }
        });
    },
    rate: function rate(frm, cdt, cdn) {
        facelec_tax_calculation(frm, cdt, cdn);
    }
});

frappe.ui.form.on("Sales Invoice", "before_save", function (frm) {
    frm.doc.items.forEach(function (item) {
        console.log("item contains: " + item);

        facelec_tax_calculation_conversion(frm, "Sales Invoice Item", item.name);
        tax_before_calc = frm.doc.facelec_total_iva;
        console.log("El descuento total es:" + frm.doc.discount_amount);
        console.log("El IVA calculado anteriormente:" + frm.doc.facelec_total_iva);
        discount_amount_net_value = frm.doc.discount_amount / (1 + cur_frm.doc.taxes[0].rate / 100);
        console.log("El neto sin iva del descuento es" + discount_amount_net_value);
        discount_amount_tax_value = discount_amount_net_value * (cur_frm.doc.taxes[0].rate / 100);
        console.log("El IVA del descuento es:" + discount_amount_tax_value);
        frm.doc.facelec_total_iva = frm.doc.facelec_total_iva - discount_amount_tax_value;
        console.log("El IVA ya sin el iva del descuento es ahora:" + frm.doc.facelec_total_iva);
    });
});

frappe.ui.form.on("Sales Invoice", "refresh", function (frm) {
    cur_frm.add_fetch("customer", "nit_face_customer", "nit_face_customer");

    frm.add_custom_button("UOM Recalculation", function () {
        frm.doc.items.forEach(function (item) {
            console.log("item contains: " + item);

            facelec_tax_calculation_conversion(frm, "Sales Invoice Item", item.name);
        });
    });

    if (frm.doc.status === "Paid" || frm.doc.status === "Unpaid" || frm.doc.status === "Submitted" || frm.doc.status === "Overdue") {
        if (frm.doc.cae_factura_electronica) {
            cur_frm.clear_custom_buttons();
            pdf_button(frm.doc.cae_factura_electronica);
        } else {
            var nombre = 'Factura Electronica';
            frm.add_custom_button(__(nombre), function () {
                frappe.call({
                    method: "factura_electronica.api.generar_factura_electronica",
                    args: {
                        serie_factura: frm.doc.name,
                        nombre_cliente: frm.doc.customer
                    },

                    callback: function callback(data) {
                        cur_frm.set_value("cae_factura_electronica", data.message);
                        if (frm.doc.cae_factura_electronica) {
                            cur_frm.clear_custom_buttons();
                            pdf_button(frm.doc.cae_factura_electronica);
                        }
                    }
                });
            }).addClass("btn-primary");
        }
    }

    function pdf_button(cae_documento) {
        frappe.call({
            method: "factura_electronica.api.save_url_pdf",
            callback: function callback(data) {
                console.log(data.message);
                if (data.message === 'Manual') {
                    frm.add_custom_button(__("Obtener PDF"), function () {
                        window.open("https://www.ingface.net/Ingfacereport/dtefactura.jsp?cae=" + cae_documento);
                    }).addClass("btn-primary");
                } else {}
            }
        });
    }

    if (frm.doc.status === "Return") {
        if (frm.doc.cae_nota_de_credito) {
            cur_frm.clear_custom_buttons();
            pdf_button(frm.doc.cae_nota_de_credito);
        } else {
            frm.add_custom_button(__('Nota Credito'), function () {
                frappe.call({
                    method: "factura_electronica.api.generar_factura_electronica",
                    args: {
                        serie_factura: frm.doc.name,
                        nombre_cliente: frm.doc.customer
                    },

                    callback: function callback(data) {
                        cur_frm.set_value("cae_nota_de_credito", data.message);
                        if (frm.doc.cae_nota_de_credito) {
                            cur_frm.clear_custom_buttons();
                            pdf_button(frm.doc.cae_nota_de_credito);
                        }
                    }
                });
            }).addClass("btn-primary");
        }
    }

    if (frm.doc.status === "Paid" || frm.doc.status === "Unpaid" || frm.doc.status === "Submitted" || frm.doc.status === "Overdue") {
        if (frm.doc.es_nota_de_debito == 1) {
            cur_frm.clear_custom_buttons('Factura Electronica');
            if (frm.doc.cae_nota_de_debito) {
                cur_frm.clear_custom_buttons();
                pdf_button(frm.doc.cae_nota_de_debito);
            } else {
                frm.add_custom_button(__('Nota Debito'), function () {
                    frappe.call({
                        method: "factura_electronica.api.generar_factura_electronica",
                        args: {
                            serie_factura: frm.doc.name,
                            nombre_cliente: frm.doc.customer
                        },

                        callback: function callback(data) {

                            cur_frm.set_value("cae_nota_de_debito", data.message);
                            if (frm.doc.cae_nota_de_debito) {
                                cur_frm.clear_custom_buttons();
                                pdf_button(frm.doc.cae_nota_de_debito);
                            }
                        }
                    });
                }).addClass("btn-primary");
            }
        }
    }
});

shs_purchase_invoice_calculation = function shs_purchase_invoice_calculation(frm, cdt, cdn) {

    refresh_field('items');

    this_company_sales_tax_var = cur_frm.doc.taxes[0].rate;

    var this_row_qty, this_row_rate, this_row_amount, this_row_conversion_factor, this_row_stock_qty, this_row_tax_rate, this_row_tax_amount, this_row_taxable_amount;

    frm.doc.items.forEach(function (item_row, index) {
        if (item_row.name == cdn) {
            this_row_amount = item_row.qty * item_row.rate;
            this_row_stock_qty = item_row.qty * item_row.conversion_factor;
            this_row_tax_rate = item_row.facelec_p_tax_rate_per_uom;
            this_row_tax_amount = this_row_stock_qty * this_row_tax_rate;
            this_row_taxable_amount = this_row_amount - this_row_tax_amount;

            frm.doc.items[index].facelec_p_other_tax_amount = item_row.facelec_p_tax_rate_per_uom * (item_row.qty * item_row.conversion_factor);

            frm.doc.items[index].facelec_p_amount_minus_excise_tax = item_row.qty * item_row.rate - item_row.qty * item_row.conversion_factor * item_row.facelec_p_tax_rate_per_uom;
            console.log("uom that just changed is: " + item_row.uom);
            console.log("stock qty is: " + item_row.stock_qty);
            console.log("conversion_factor is: " + item_row.conversion_factor);
            if (item_row.facelec_p_is_fuel == 1) {
                frm.doc.items[index].facelec_p_gt_tax_net_fuel_amt = item_row.facelec_p_amount_minus_excise_tax / (1 + this_company_sales_tax_var / 100);
                frm.doc.items[index].facelec_p_sales_tax_for_this_row = item_row.facelec_p_gt_tax_net_fuel_amt * (this_company_sales_tax_var / 100);

                total_fuel = 0;
                $.each(frm.doc.items || [], function (i, d) {
                    if (d.facelec_p_is_fuel == true) {
                        total_fuel += flt(d.facelec_p_gt_tax_net_fuel_amt);
                    };
                });
                frm.doc.facelec_p_gt_tax_fuel = total_fuel;
            };
            if (item_row.facelec_p_is_good == 1) {
                frm.doc.items[index].facelec_p_gt_tax_net_goods_amt = item_row.facelec_p_amount_minus_excise_tax / (1 + this_company_sales_tax_var / 100);
                frm.doc.items[index].facelec_p_sales_tax_for_this_row = item_row.facelec_p_gt_tax_net_goods_amt * (this_company_sales_tax_var / 100);

                total_goods = 0;
                $.each(frm.doc.items || [], function (i, d) {
                    if (d.facelec_p_is_good == true) {
                        total_goods += flt(d.facelec_p_gt_tax_net_goods_amt);
                    };
                });
                frm.doc.facelec_p_gt_tax_goods = total_goods;
            };
            if (item_row.facelec_p_is_service == 1) {
                frm.doc.items[index].facelec_p_gt_tax_net_services_amt = item_row.facelec_p_amount_minus_excise_tax / (1 + this_company_sales_tax_var / 100);
                frm.doc.items[index].facelec_p_sales_tax_for_this_row = item_row.facelec_p_gt_tax_net_services_amt * (this_company_sales_tax_var / 100);

                total_servi = 0;
                $.each(frm.doc.items || [], function (i, d) {
                    if (d.facelec_p_is_service == true) {
                        total_servi += flt(d.facelec_p_gt_tax_net_services_amt);
                    };
                });
                frm.doc.facelec_p_gt_tax_services = total_servi;
            };
            full_tax_iva = 0;
            $.each(frm.doc.items || [], function (i, d) {
                full_tax_iva += flt(d.facelec_p_sales_tax_for_this_row);
            });
            frm.doc.facelec_p_total_iva = full_tax_iva;
        };
    });
};

frappe.ui.form.on("Purchase Invoice", {
    refresh: function refresh(frm, cdt, cdn) {
        console.log('Exito Script In Purchase Invoice');

        frm.add_custom_button("UOM Recalculation", function () {
            frm.doc.items.forEach(function (item) {
                console.log("item contains: " + item);

                shs_purchase_invoice_calculation(frm, "Purchase Invoice Item", item.name);
            });
        });
    },
    facelec_nit_fproveedor: function facelec_nit_fproveedor(frm, cdt, cdn) {
        valNit(frm.doc.facelec_nit_fproveedor, frm.doc.supplier, frm);
    },
    discount_amount: function discount_amount(frm, cdt, cdn) {
        tax_before_calc = frm.doc.facelec_p_total_iva;
        console.log("El descuento total es:" + frm.doc.discount_amount);
        console.log("El IVA calculado anteriormente:" + frm.doc.facelec_p_total_iva);
        discount_amount_net_value = frm.doc.discount_amount / (1 + cur_frm.doc.taxes[0].rate / 100);
        console.log("El neto sin iva del descuento es" + discount_amount_net_value);
        discount_amount_tax_value = discount_amount_net_value * (cur_frm.doc.taxes[0].rate / 100);
        console.log("El IVA del descuento es:" + discount_amount_tax_value);
        frm.doc.facelec_p_total_iva = frm.doc.facelec_p_total_iva - discount_amount_tax_value;
        console.log("El IVA ya sin el iva del descuento es ahora:" + frm.doc.facelec_p_total_iva);
    },
    supplier: function supplier(frm, cdt, cdn) {
        this_company_sales_tax_var = cur_frm.doc.taxes[0].rate;
        console.log('Corrio supplier trigger y se cargo el IVA, el cual es ' + this_company_sales_tax_var);
    },
    before_save: function before_save(frm, cdt, cdn) {
        frm.doc.items.forEach(function (item) {
            console.log("item contains: " + item);

            shs_purchase_invoice_calculation(frm, "Purchase Invoice Item", item.name);
            tax_before_calc = frm.doc.facelec_p_total_iva;
            console.log("El descuento total es:" + frm.doc.discount_amount);
            console.log("El IVA calculado anteriormente:" + frm.doc.facelec_p_total_iva);
            discount_amount_net_value = frm.doc.discount_amount / (1 + cur_frm.doc.taxes[0].rate / 100);
            console.log("El neto sin iva del descuento es" + discount_amount_net_value);
            discount_amount_tax_value = discount_amount_net_value * (cur_frm.doc.taxes[0].rate / 100);
            console.log("El IVA del descuento es:" + discount_amount_tax_value);
            frm.doc.facelec_p_total_iva = frm.doc.facelec_p_total_iva - discount_amount_tax_value;
            console.log("El IVA ya sin el iva del descuento es ahora:" + frm.doc.facelec_p_total_iva);
        });
    }
});

frappe.ui.form.on("Purchase Invoice Item", {
    items_add: function items_add(frm, cdt, cdn) {},
    items_move: function items_move(frm, cdt, cdn) {},
    before_items_remove: function before_items_remove(frm, cdt, cdn) {},
    items_remove: function items_remove(frm, cdt, cdn) {
        fix_gt_tax_fuel = 0;
        fix_gt_tax_goods = 0;
        fix_gt_tax_services = 0;
        fix_gt_tax_iva = 0;

        $.each(frm.doc.items || [], function (i, d) {
            fix_gt_tax_fuel += flt(d.facelec_p_gt_tax_net_fuel_amt);
            fix_gt_tax_goods += flt(d.facelec_p_gt_tax_net_goods_amt);
            fix_gt_tax_services += flt(d.facelec_p_gt_tax_net_services_amt);
            fix_gt_tax_iva += flt(d.facelec_p_sales_tax_for_this_row);
        });

        cur_frm.set_value("facelec_p_gt_tax_fuel", fix_gt_tax_fuel);
        cur_frm.set_value("facelec_p_gt_tax_goods", fix_gt_tax_goods);
        cur_frm.set_value("facelec_p_gt_tax_services", fix_gt_tax_services);
        cur_frm.set_value("facelec_p_total_iva", fix_gt_tax_iva);
    },
    item_code: function item_code(frm, cdt, cdn) {
        this_company_sales_tax_var = cur_frm.doc.taxes[0].rate;
        console.log("If you can see this, tax rate variable now exists, and its set to: " + this_company_sales_tax_var);
        refresh_field('qty');
    },
    qty: function qty(frm, cdt, cdn) {
        shs_purchase_invoice_calculation(frm, cdt, cdn);
        console.log("cdt contains: " + cdt);
        console.log("cdn contains: " + cdn);
    },
    uom: function uom(frm, cdt, cdn) {
        console.log("The unit of measure field was changed and the code from the trigger was run");
    },
    conversion_factor: function conversion_factor(frm, cdt, cdn) {
        console.log("El disparador de factor de conversión se corrió.");
        shs_purchase_invoice_calculation(frm, cdt, cdn);
    },
    facelec_p_tax_rate_per_uom_account: function facelec_p_tax_rate_per_uom_account(frm, cdt, cdn) {
        frm.doc.items.forEach(function (item_row_i, index_i) {
            if (item_row_i.name == cdn) {
                var cuenta = item_row_i.facelec_p_tax_rate_per_uom_account;
                if (cuenta !== null) {
                    if (buscar_account(frm, cuenta)) {
                        console.log('La cuenta ya existe');
                    } else {
                        console.log('La cuenta no existe, se agregara una nueva fila en taxes');
                        frappe.model.add_child(frm.doc, "Sales Taxes and Charges", "taxes");
                        frm.doc.taxes.forEach(function (item_row, index) {
                            if (item_row.account_head == undefined) {
                                frappe.call({
                                    method: "factura_electronica.api.get_data_tax_account",
                                    args: {
                                        name_account_tax_gt: cuenta
                                    },

                                    callback: function callback(data) {
                                        frm.doc.taxes[index].charge_type = 'On Net Total';
                                        frm.doc.taxes[index].account_head = cuenta;
                                        frm.doc.taxes[index].rate = data.message;

                                        frm.doc.taxes[index].description = 'Impuesto';
                                    }
                                });
                            }
                        });
                    }
                } else {
                    console.log('El producto seleccionado no tiene una cuenta asociada');
                }
            }
        });
    },
    rate: function rate(frm, cdt, cdn) {
        shs_purchase_invoice_calculation(frm, cdt, cdn);
    }
});

shs_quotation_calculation = function shs_quotation_calculation(frm, cdt, cdn) {

    refresh_field('items');

    this_company_sales_tax_var = cur_frm.doc.taxes[0].rate;

    var this_row_qty, this_row_rate, this_row_amount, this_row_conversion_factor, this_row_stock_qty, this_row_tax_rate, this_row_tax_amount, this_row_taxable_amount;

    frm.doc.items.forEach(function (item_row, index) {
        if (item_row.name == cdn) {
            this_row_amount = item_row.qty * item_row.rate;
            this_row_stock_qty = item_row.qty * item_row.conversion_factor;
            this_row_tax_rate = item_row.facelec_qt_tax_rate_per_uom;
            this_row_tax_amount = this_row_stock_qty * this_row_tax_rate;
            this_row_taxable_amount = this_row_amount - this_row_tax_amount;

            frm.doc.items[index].facelec_qt_other_tax_amount = item_row.facelec_qt_tax_rate_per_uom * (item_row.qty * item_row.conversion_factor);

            frm.doc.items[index].facelec_qt_amount_minus_excise_tax = item_row.qty * item_row.rate - item_row.qty * item_row.conversion_factor * item_row.facelec_qt_tax_rate_per_uom;
            console.log("uom that just changed is: " + item_row.uom);
            console.log("stock qty is: " + item_row.stock_qty);
            console.log("conversion_factor is: " + item_row.conversion_factor);
            if (item_row.facelec_qt_is_fuel == 1) {
                frm.doc.items[index].facelec_qt_gt_tax_net_fuel_amt = item_row.facelec_qt_amount_minus_excise_tax / (1 + this_company_sales_tax_var / 100);
                frm.doc.items[index].facelec_qt_sales_tax_for_this_row = item_row.facelec_qt_gt_tax_net_fuel_amt * (this_company_sales_tax_var / 100);

                total_fuel = 0;
                $.each(frm.doc.items || [], function (i, d) {
                    if (d.facelec_qt_is_fuel == true) {
                        total_fuel += flt(d.facelec_qt_gt_tax_net_fuel_amt);
                    };
                });
                frm.doc.facelec_qt_gt_tax_fuel = total_fuel;
            };
            if (item_row.facelec_qt_is_good == 1) {
                frm.doc.items[index].facelec_qt_gt_tax_net_goods_amt = item_row.facelec_qt_amount_minus_excise_tax / (1 + this_company_sales_tax_var / 100);
                frm.doc.items[index].facelec_qt_sales_tax_for_this_row = item_row.facelec_qt_gt_tax_net_goods_amt * (this_company_sales_tax_var / 100);

                total_goods = 0;
                $.each(frm.doc.items || [], function (i, d) {
                    if (d.facelec_qt_is_good == true) {
                        total_goods += flt(d.facelec_qt_gt_tax_net_goods_amt);
                    };
                });
                frm.doc.facelec_qt_gt_tax_goods = total_goods;
            };
            if (item_row.facelec_qt_is_service == 1) {
                frm.doc.items[index].facelec_qt_gt_tax_net_services_amt = item_row.facelec_qt_amount_minus_excise_tax / (1 + this_company_sales_tax_var / 100);
                frm.doc.items[index].facelec_qt_sales_tax_for_this_row = item_row.facelec_qt_gt_tax_net_services_amt * (this_company_sales_tax_var / 100);

                total_servi = 0;
                $.each(frm.doc.items || [], function (i, d) {
                    if (d.facelec_qt_is_service == true) {
                        total_servi += flt(d.facelec_qt_gt_tax_net_services_amt);
                    };
                });
                frm.doc.facelec_qt_gt_tax_services = total_servi;
            };
            full_tax_iva = 0;
            $.each(frm.doc.items || [], function (i, d) {
                full_tax_iva += flt(d.facelec_qt_sales_tax_for_this_row);
            });
            frm.doc.facelec_qt_total_iva = full_tax_iva;
        };
    });
};

frappe.ui.form.on("Quotation", {
    refresh: function refresh(frm, cdt, cdn) {
        console.log('Exito Script In Quotation');

        frm.add_custom_button("UOM Recalculation", function () {
            frm.doc.items.forEach(function (item) {
                console.log("item contains: " + item);

                shs_quotation_calculation(frm, "Quotation Item", item.name);
            });
        });
    },
    facelec_qt_nit: function facelec_qt_nit(frm, cdt, cdn) {
        valNit(frm.doc.facelec_qt_nit, frm.doc.customer, frm);
    },
    discount_amount: function discount_amount(frm, cdt, cdn) {
        tax_before_calc = frm.doc.facelec_qt_total_iva;
        console.log("El descuento total es:" + frm.doc.discount_amount);
        console.log("El IVA calculado anteriormente:" + frm.doc.facelec_qt_total_iva);
        discount_amount_net_value = frm.doc.discount_amount / (1 + cur_frm.doc.taxes[0].rate / 100);
        console.log("El neto sin iva del descuento es" + discount_amount_net_value);
        discount_amount_tax_value = discount_amount_net_value * (cur_frm.doc.taxes[0].rate / 100);
        console.log("El IVA del descuento es:" + discount_amount_tax_value);
        frm.doc.facelec_qt_total_iva = frm.doc.facelec_qt_total_iva - discount_amount_tax_value;
        console.log("El IVA ya sin el iva del descuento es ahora:" + frm.doc.facelec_qt_total_iva);
    },
    customer: function customer(frm, cdt, cdn) {
        this_company_sales_tax_var = cur_frm.doc.taxes[0].rate;
        console.log('Corrio customer trigger y se cargo el IVA, el cual es ' + this_company_sales_tax_var);
    },
    before_save: function before_save(frm, cdt, cdn) {
        frm.doc.items.forEach(function (item) {
            console.log("item contains: " + item);

            shs_quotation_calculation(frm, "Quotation Item", item.name);
            tax_before_calc = frm.doc.facelec_qt_total_iva;
            console.log("El descuento total es:" + frm.doc.discount_amount);
            console.log("El IVA calculado anteriormente:" + frm.doc.facelec_qt_total_iva);
            discount_amount_net_value = frm.doc.discount_amount / (1 + cur_frm.doc.taxes[0].rate / 100);
            console.log("El neto sin iva del descuento es" + discount_amount_net_value);
            discount_amount_tax_value = discount_amount_net_value * (cur_frm.doc.taxes[0].rate / 100);
            console.log("El IVA del descuento es:" + discount_amount_tax_value);
            frm.doc.facelec_qt_total_iva = frm.doc.facelec_qt_total_iva - discount_amount_tax_value;
            console.log("El IVA ya sin el iva del descuento es ahora:" + frm.doc.facelec_qt_total_iva);
        });
    }
});

frappe.ui.form.on("Quotation Item", {
    items_add: function items_add(frm, cdt, cdn) {},
    items_move: function items_move(frm, cdt, cdn) {},
    before_items_remove: function before_items_remove(frm, cdt, cdn) {},
    items_remove: function items_remove(frm, cdt, cdn) {
        fix_gt_tax_fuel = 0;
        fix_gt_tax_goods = 0;
        fix_gt_tax_services = 0;
        fix_gt_tax_iva = 0;

        $.each(frm.doc.items || [], function (i, d) {
            fix_gt_tax_fuel += flt(d.facelec_qt_gt_tax_net_fuel_amt);
            fix_gt_tax_goods += flt(d.facelec_qt_gt_tax_net_goods_amt);
            fix_gt_tax_services += flt(d.facelec_qt_gt_tax_net_services_amt);
            fix_gt_tax_iva += flt(d.facelec_qt_sales_tax_for_this_row);
        });

        cur_frm.set_value("facelec_qt_gt_tax_fuel", fix_gt_tax_fuel);
        cur_frm.set_value("facelec_qt_gt_tax_goods", fix_gt_tax_goods);
        cur_frm.set_value("facelec_qt_gt_tax_services", fix_gt_tax_services);
        cur_frm.set_value("facelec_qt_total_iva", fix_gt_tax_iva);
    },
    item_code: function item_code(frm, cdt, cdn) {
        this_company_sales_tax_var = cur_frm.doc.taxes[0].rate;
        console.log("If you can see this, tax rate variable now exists, and its set to: " + this_company_sales_tax_var);
        refresh_field('qty');
    },
    qty: function qty(frm, cdt, cdn) {
        shs_quotation_calculation(frm, cdt, cdn);
        console.log("cdt contains: " + cdt);
        console.log("cdn contains: " + cdn);
    },
    uom: function uom(frm, cdt, cdn) {
        console.log("The unit of measure field was changed and the code from the trigger was run");
    },
    conversion_factor: function conversion_factor(frm, cdt, cdn) {
        console.log("El disparador de factor de conversión se corrió.");
        shs_quotation_calculation(frm, cdt, cdn);
    },
    facelec_qt_tax_rate_per_uom_account: function facelec_qt_tax_rate_per_uom_account(frm, cdt, cdn) {
        frm.doc.items.forEach(function (item_row_i, index_i) {
            if (item_row_i.name == cdn) {
                var cuenta = item_row_i.facelec_qt_tax_rate_per_uom_account;
                if (cuenta !== null) {
                    if (buscar_account(frm, cuenta)) {
                        console.log('La cuenta ya existe');
                    } else {
                        console.log('La cuenta no existe, se agregara una nueva fila en taxes');
                        frappe.model.add_child(frm.doc, "Sales Taxes and Charges", "taxes");
                        frm.doc.taxes.forEach(function (item_row, index) {
                            if (item_row.account_head == undefined) {
                                frappe.call({
                                    method: "factura_electronica.api.get_data_tax_account",
                                    args: {
                                        name_account_tax_gt: cuenta
                                    },

                                    callback: function callback(data) {
                                        frm.doc.taxes[index].charge_type = 'On Net Total';
                                        frm.doc.taxes[index].account_head = cuenta;
                                        frm.doc.taxes[index].rate = data.message;

                                        frm.doc.taxes[index].description = 'Impuesto';
                                    }
                                });
                            }
                        });
                    }
                } else {
                    console.log('El producto seleccionado no tiene una cuenta asociada');
                }
            }
        });
    },
    rate: function rate(frm, cdt, cdn) {
        shs_quotation_calculation(frm, cdt, cdn);
    }
});

shs_purchase_order_calculation = function shs_purchase_order_calculation(frm, cdt, cdn) {
    refresh_field('items');

    this_company_sales_tax_var = cur_frm.doc.taxes[0].rate;

    var this_row_qty, this_row_rate, this_row_amount, this_row_conversion_factor, this_row_stock_qty, this_row_tax_rate, this_row_tax_amount, this_row_taxable_amount;

    frm.doc.items.forEach(function (item_row, index) {
        if (item_row.name == cdn) {
            this_row_amount = item_row.qty * item_row.rate;
            this_row_stock_qty = item_row.qty * item_row.conversion_factor;
            this_row_tax_rate = item_row.facelec_po_tax_rate_per_uom;
            this_row_tax_amount = this_row_stock_qty * this_row_tax_rate;
            this_row_taxable_amount = this_row_amount - this_row_tax_amount;

            frm.doc.items[index].facelec_po_other_tax_amount = item_row.facelec_po_tax_rate_per_uom * (item_row.qty * item_row.conversion_factor);

            frm.doc.items[index].facelec_po_amount_minus_excise_tax = item_row.qty * item_row.rate - item_row.qty * item_row.conversion_factor * item_row.facelec_po_tax_rate_per_uom;
            console.log("uom that just changed is: " + item_row.uom);
            console.log("stock qty is: " + item_row.stock_qty);
            console.log("conversion_factor is: " + item_row.conversion_factor);

            if (item_row.facelec_po_is_fuel == 1) {
                frm.doc.items[index].facelec_po_gt_tax_net_fuel_amt = item_row.facelec_po_amount_minus_excise_tax / (1 + this_company_sales_tax_var / 100);
                frm.doc.items[index].facelec_po_sales_tax_for_this_row = item_row.facelec_po_gt_tax_net_fuel_amt * (this_company_sales_tax_var / 100);

                total_fuel = 0;
                $.each(frm.doc.items || [], function (i, d) {
                    if (d.facelec_po_is_fuel == true) {
                        total_fuel += flt(d.facelec_po_gt_tax_net_fuel_amt);
                    };
                });
                frm.doc.facelec_po_gt_tax_fuel = total_fuel;
            };

            if (item_row.facelec_po_is_good == 1) {
                frm.doc.items[index].facelec_po_gt_tax_net_goods_amt = item_row.facelec_po_amount_minus_excise_tax / (1 + this_company_sales_tax_var / 100);
                frm.doc.items[index].facelec_po_sales_tax_for_this_row = item_row.facelec_po_gt_tax_net_goods_amt * (this_company_sales_tax_var / 100);

                total_goods = 0;
                $.each(frm.doc.items || [], function (i, d) {
                    if (d.facelec_po_is_good == true) {
                        total_goods += flt(d.facelec_po_gt_tax_net_goods_amt);
                    };
                });
                frm.doc.facelec_po_gt_tax_goods = total_goods;
            };

            if (item_row.facelec_po_is_service == 1) {
                frm.doc.items[index].facelec_po_gt_tax_net_services_amt = item_row.facelec_po_amount_minus_excise_tax / (1 + this_company_sales_tax_var / 100);
                frm.doc.items[index].facelec_po_sales_tax_for_this_row = item_row.facelec_po_gt_tax_net_services_amt * (this_company_sales_tax_var / 100);

                total_servi = 0;
                $.each(frm.doc.items || [], function (i, d) {
                    if (d.facelec_po_is_service == true) {
                        total_servi += flt(d.facelec_po_gt_tax_net_services_amt);
                    };
                });
                frm.doc.facelec_po_gt_tax_services = total_servi;
            };

            full_tax_iva = 0;
            $.each(frm.doc.items || [], function (i, d) {
                full_tax_iva += flt(d.facelec_po_sales_tax_for_this_row);
            });
            frm.doc.facelec_po_total_iva = full_tax_iva;
        };
    });
};

frappe.ui.form.on("Purchase Order", {
    refresh: function refresh(frm, cdt, cdn) {
        console.log('Exito Script In Purchase Order');

        frm.add_custom_button("UOM Recalculation", function () {
            frm.doc.items.forEach(function (item) {
                console.log("item contains: " + item);

                shs_purchase_order_calculation(frm, "Purchase Order Item", item.name);
            });
        });
    },
    facelec_po_nit: function facelec_po_nit(frm, cdt, cdn) {
        valNit(frm.doc.facelec_po_nit, frm.doc.supplier, frm);
    },
    discount_amount: function discount_amount(frm, cdt, cdn) {
        tax_before_calc = frm.doc.facelec_po_total_iva;
        console.log("El descuento total es:" + frm.doc.discount_amount);
        console.log("El IVA calculado anteriormente:" + frm.doc.facelec_po_total_iva);
        discount_amount_net_value = frm.doc.discount_amount / (1 + cur_frm.doc.taxes[0].rate / 100);
        console.log("El neto sin iva del descuento es" + discount_amount_net_value);
        discount_amount_tax_value = discount_amount_net_value * (cur_frm.doc.taxes[0].rate / 100);
        console.log("El IVA del descuento es:" + discount_amount_tax_value);
        frm.doc.facelec_po_total_iva = frm.doc.facelec_po_total_iva - discount_amount_tax_value;
        console.log("El IVA ya sin el iva del descuento es ahora:" + frm.doc.facelec_po_total_iva);
    },
    supplier: function supplier(frm, cdt, cdn) {
        this_company_sales_tax_var = cur_frm.doc.taxes[0].rate;
        console.log('Corrio supplier trigger y se cargo el IVA, el cual es ' + this_company_sales_tax_var);
    },
    before_save: function before_save(frm, cdt, cdn) {
        frm.doc.items.forEach(function (item) {
            console.log("item contains: " + item);

            shs_purchase_order_calculation(frm, "Purchase Order Item", item.name);
            tax_before_calc = frm.doc.facelec_po_total_iva;
            console.log("El descuento total es:" + frm.doc.discount_amount);
            console.log("El IVA calculado anteriormente:" + frm.doc.facelec_po_total_iva);
            discount_amount_net_value = frm.doc.discount_amount / (1 + cur_frm.doc.taxes[0].rate / 100);
            console.log("El neto sin iva del descuento es" + discount_amount_net_value);
            discount_amount_tax_value = discount_amount_net_value * (cur_frm.doc.taxes[0].rate / 100);
            console.log("El IVA del descuento es:" + discount_amount_tax_value);
            frm.doc.facelec_po_total_iva = frm.doc.facelec_po_total_iva - discount_amount_tax_value;
            console.log("El IVA ya sin el iva del descuento es ahora:" + frm.doc.facelec_po_total_iva);
        });
    }
});

frappe.ui.form.on("Purchase Order Item", {
    items_add: function items_add(frm, cdt, cdn) {},
    items_move: function items_move(frm, cdt, cdn) {},
    before_items_remove: function before_items_remove(frm, cdt, cdn) {},
    items_remove: function items_remove(frm, cdt, cdn) {
        fix_gt_tax_fuel = 0;
        fix_gt_tax_goods = 0;
        fix_gt_tax_services = 0;
        fix_gt_tax_iva = 0;

        $.each(frm.doc.items || [], function (i, d) {
            fix_gt_tax_fuel += flt(d.facelec_po_gt_tax_net_fuel_amt);
            fix_gt_tax_goods += flt(d.facelec_po_gt_tax_net_goods_amt);
            fix_gt_tax_services += flt(d.facelec_po_gt_tax_net_services_amt);
            fix_gt_tax_iva += flt(d.facelec_po_sales_tax_for_this_row);
        });

        cur_frm.set_value("facelec_po_gt_tax_fuel", fix_gt_tax_fuel);
        cur_frm.set_value("facelec_po_gt_tax_goods", fix_gt_tax_goods);
        cur_frm.set_value("facelec_po_gt_tax_services", fix_gt_tax_services);
        cur_frm.set_value("facelec_po_total_iva", fix_gt_tax_iva);
    },
    item_code: function item_code(frm, cdt, cdn) {
        this_company_sales_tax_var = cur_frm.doc.taxes[0].rate;
        console.log("If you can see this, tax rate variable now exists, and its set to: " + this_company_sales_tax_var);
        refresh_field('qty');
    },
    qty: function qty(frm, cdt, cdn) {
        shs_purchase_order_calculation(frm, cdt, cdn);
        console.log("cdt contains: " + cdt);
        console.log("cdn contains: " + cdn);
    },
    uom: function uom(frm, cdt, cdn) {
        console.log("The unit of measure field was changed and the code from the trigger was run");
    },
    conversion_factor: function conversion_factor(frm, cdt, cdn) {
        console.log("El disparador de factor de conversión se corrió.");
        shs_purchase_order_calculation(frm, cdt, cdn);
    },
    facelec_po_tax_rate_per_uom_account: function facelec_po_tax_rate_per_uom_account(frm, cdt, cdn) {
        frm.doc.items.forEach(function (item_row_i, index_i) {
            if (item_row_i.name == cdn) {
                var cuenta = item_row_i.facelec_po_tax_rate_per_uom_account;
                if (cuenta !== null) {
                    if (buscar_account(frm, cuenta)) {
                        console.log('La cuenta ya existe');
                    } else {
                        console.log('La cuenta no existe, se agregara una nueva fila en taxes');
                        frappe.model.add_child(frm.doc, "Sales Taxes and Charges", "taxes");
                        frm.doc.taxes.forEach(function (item_row, index) {
                            if (item_row.account_head == undefined) {
                                frappe.call({
                                    method: "factura_electronica.api.get_data_tax_account",
                                    args: {
                                        name_account_tax_gt: cuenta
                                    },

                                    callback: function callback(data) {
                                        frm.doc.taxes[index].charge_type = 'On Net Total';
                                        frm.doc.taxes[index].account_head = cuenta;
                                        frm.doc.taxes[index].rate = data.message;

                                        frm.doc.taxes[index].description = 'Impuesto';
                                    }
                                });
                            }
                        });
                    }
                } else {
                    console.log('El producto seleccionado no tiene una cuenta asociada');
                }
            }
        });
    },
    rate: function rate(frm, cdt, cdn) {
        shs_purchase_order_calculation(frm, cdt, cdn);
    }
});

shs_purchase_receipt_calculation = function shs_purchase_receipt_calculation(frm, cdt, cdn) {

    refresh_field('items');

    this_company_sales_tax_var = cur_frm.doc.taxes[0].rate;

    var this_row_qty, this_row_rate, this_row_amount, this_row_conversion_factor, this_row_stock_qty, this_row_tax_rate, this_row_tax_amount, this_row_taxable_amount;

    frm.doc.items.forEach(function (item_row, index) {
        if (item_row.name == cdn) {
            this_row_amount = item_row.qty * item_row.rate;
            this_row_stock_qty = item_row.qty * item_row.conversion_factor;
            this_row_tax_rate = item_row.facelec_pr_tax_rate_per_uom;
            this_row_tax_amount = this_row_stock_qty * this_row_tax_rate;
            this_row_taxable_amount = this_row_amount - this_row_tax_amount;

            frm.doc.items[index].facelec_pr_other_tax_amount = item_row.facelec_pr_tax_rate_per_uom * (item_row.qty * item_row.conversion_factor);

            frm.doc.items[index].facelec_pr_amount_minus_excise_tax = item_row.qty * item_row.rate - item_row.qty * item_row.conversion_factor * item_row.facelec_pr_tax_rate_per_uom;
            console.log("uom that just changed is: " + item_row.uom);
            console.log("stock qty is: " + item_row.stock_qty);
            console.log("conversion_factor is: " + item_row.conversion_factor);
            if (item_row.facelec_pr_is_fuel == 1) {
                frm.doc.items[index].facelec_pr_gt_tax_net_fuel_amt = item_row.facelec_pr_amount_minus_excise_tax / (1 + this_company_sales_tax_var / 100);
                frm.doc.items[index].facelec_pr_sales_tax_for_this_row = item_row.facelec_pr_gt_tax_net_fuel_amt * (this_company_sales_tax_var / 100);

                total_fuel = 0;
                $.each(frm.doc.items || [], function (i, d) {
                    if (d.facelec_pr_is_fuel == true) {
                        total_fuel += flt(d.facelec_pr_gt_tax_net_fuel_amt);
                    };
                });
                frm.doc.facelec_pr_gt_tax_fuel = total_fuel;
            };
            if (item_row.facelec_pr_is_good == 1) {
                frm.doc.items[index].facelec_pr_gt_tax_net_goods_amt = item_row.facelec_pr_amount_minus_excise_tax / (1 + this_company_sales_tax_var / 100);
                frm.doc.items[index].facelec_pr_sales_tax_for_this_row = item_row.facelec_pr_gt_tax_net_goods_amt * (this_company_sales_tax_var / 100);

                total_goods = 0;
                $.each(frm.doc.items || [], function (i, d) {
                    if (d.facelec_pr_is_good == true) {
                        total_goods += flt(d.facelec_pr_gt_tax_net_goods_amt);
                    };
                });
                frm.doc.facelec_pr_gt_tax_goods = total_goods;
            };
            if (item_row.facelec_pr_is_service == 1) {
                frm.doc.items[index].facelec_pr_gt_tax_net_services_amt = item_row.facelec_pr_amount_minus_excise_tax / (1 + this_company_sales_tax_var / 100);
                frm.doc.items[index].facelec_pr_sales_tax_for_this_row = item_row.facelec_pr_gt_tax_net_services_amt * (this_company_sales_tax_var / 100);

                total_servi = 0;
                $.each(frm.doc.items || [], function (i, d) {
                    if (d.facelec_pr_is_service == true) {
                        total_servi += flt(d.facelec_pr_gt_tax_net_services_amt);
                    };
                });
                frm.doc.facelec_pr_gt_tax_services = total_servi;
            };
            full_tax_iva = 0;
            $.each(frm.doc.items || [], function (i, d) {
                full_tax_iva += flt(d.facelec_pr_sales_tax_for_this_row);
            });
            frm.doc.facelec_pr_total_iva = full_tax_iva;
        };
    });
};

frappe.ui.form.on("Purchase Receipt", {
    refresh: function refresh(frm, cdt, cdn) {
        console.log('Exito Script In Purchase Receipt');

        frm.add_custom_button("UOM Recalculation", function () {
            frm.doc.items.forEach(function (item) {
                console.log("item contains: " + item);

                shs_purchase_receipt_calculation(frm, "Purchase Receipt Item", item.name);
            });
        });
    },
    facelec_nit_prproveedor: function facelec_nit_prproveedor(frm, cdt, cdn) {
        valNit(frm.doc.facelec_nit_prproveedor, frm.doc.supplier, frm);
    },
    discount_amount: function discount_amount(frm, cdt, cdn) {
        tax_before_calc = frm.doc.facelec_pr_total_iva;
        console.log("El descuento total es:" + frm.doc.discount_amount);
        console.log("El IVA calculado anteriormente:" + frm.doc.facelec_pr_total_iva);
        discount_amount_net_value = frm.doc.discount_amount / (1 + cur_frm.doc.taxes[0].rate / 100);
        console.log("El neto sin iva del descuento es" + discount_amount_net_value);
        discount_amount_tax_value = discount_amount_net_value * (cur_frm.doc.taxes[0].rate / 100);
        console.log("El IVA del descuento es:" + discount_amount_tax_value);
        frm.doc.facelec_pr_total_iva = frm.doc.facelec_pr_total_iva - discount_amount_tax_value;
        console.log("El IVA ya sin el iva del descuento es ahora:" + frm.doc.facelec_pr_total_iva);
    },
    supplier: function supplier(frm, cdt, cdn) {
        this_company_sales_tax_var = cur_frm.doc.taxes[0].rate;
        console.log('Corrio supplier trigger y se cargo el IVA, el cual es ' + this_company_sales_tax_var);
    },
    before_save: function before_save(frm, cdt, cdn) {
        frm.doc.items.forEach(function (item) {
            console.log("item contains: " + item);

            shs_purchase_receipt_calculation(frm, "Purchase Receipt Item", item.name);
            tax_before_calc = frm.doc.facelec_pr_total_iva;
            console.log("El descuento total es:" + frm.doc.discount_amount);
            console.log("El IVA calculado anteriormente:" + frm.doc.facelec_pr_total_iva);
            discount_amount_net_value = frm.doc.discount_amount / (1 + cur_frm.doc.taxes[0].rate / 100);
            console.log("El neto sin iva del descuento es" + discount_amount_net_value);
            discount_amount_tax_value = discount_amount_net_value * (cur_frm.doc.taxes[0].rate / 100);
            console.log("El IVA del descuento es:" + discount_amount_tax_value);
            frm.doc.facelec_pr_total_iva = frm.doc.facelec_pr_total_iva - discount_amount_tax_value;
            console.log("El IVA ya sin el iva del descuento es ahora:" + frm.doc.facelec_pr_total_iva);
        });
    }
});

frappe.ui.form.on("Purchase Receipt Item", {
    items_add: function items_add(frm, cdt, cdn) {},
    items_move: function items_move(frm, cdt, cdn) {},
    before_items_remove: function before_items_remove(frm, cdt, cdn) {},
    items_remove: function items_remove(frm, cdt, cdn) {
        fix_gt_tax_fuel = 0;
        fix_gt_tax_goods = 0;
        fix_gt_tax_services = 0;
        fix_gt_tax_iva = 0;

        $.each(frm.doc.items || [], function (i, d) {
            fix_gt_tax_fuel += flt(d.facelec_pr_gt_tax_net_fuel_amt);
            fix_gt_tax_goods += flt(d.facelec_pr_gt_tax_net_goods_amt);
            fix_gt_tax_services += flt(d.facelec_pr_gt_tax_net_services_amt);
            fix_gt_tax_iva += flt(d.facelec_pr_sales_tax_for_this_row);
        });

        cur_frm.set_value("facelec_pr_gt_tax_fuel", fix_gt_tax_fuel);
        cur_frm.set_value("facelec_pr_gt_tax_goods", fix_gt_tax_goods);
        cur_frm.set_value("facelec_pr_gt_tax_services", fix_gt_tax_services);
        cur_frm.set_value("facelec_pr_total_iva", fix_gt_tax_iva);
    },
    item_code: function item_code(frm, cdt, cdn) {
        this_company_sales_tax_var = cur_frm.doc.taxes[0].rate;
        console.log("If you can see this, tax rate variable now exists, and its set to: " + this_company_sales_tax_var);
        refresh_field('qty');
    },
    qty: function qty(frm, cdt, cdn) {
        shs_purchase_receipt_calculation(frm, cdt, cdn);
        console.log("cdt contains: " + cdt);
        console.log("cdn contains: " + cdn);
    },
    uom: function uom(frm, cdt, cdn) {
        console.log("The unit of measure field was changed and the code from the trigger was run");
    },
    conversion_factor: function conversion_factor(frm, cdt, cdn) {
        console.log("El disparador de factor de conversión se corrió.");
        shs_purchase_order_calculation(frm, cdt, cdn);
    },
    facelec_pr_tax_rate_per_uom_account: function facelec_pr_tax_rate_per_uom_account(frm, cdt, cdn) {
        frm.doc.items.forEach(function (item_row_i, index_i) {
            if (item_row_i.name == cdn) {
                var cuenta = item_row_i.facelec_pr_tax_rate_per_uom_account;
                if (cuenta !== null) {
                    if (buscar_account(frm, cuenta)) {
                        console.log('La cuenta ya existe');
                    } else {
                        console.log('La cuenta no existe, se agregara una nueva fila en taxes');
                        frappe.model.add_child(frm.doc, "Sales Taxes and Charges", "taxes");
                        frm.doc.taxes.forEach(function (item_row, index) {
                            if (item_row.account_head == undefined) {
                                frappe.call({
                                    method: "factura_electronica.api.get_data_tax_account",
                                    args: {
                                        name_account_tax_gt: cuenta
                                    },

                                    callback: function callback(data) {
                                        frm.doc.taxes[index].charge_type = 'On Net Total';
                                        frm.doc.taxes[index].account_head = cuenta;
                                        frm.doc.taxes[index].rate = data.message;

                                        frm.doc.taxes[index].description = 'Impuesto';
                                    }
                                });
                            }
                        });
                    }
                } else {
                    console.log('El producto seleccionado no tiene una cuenta asociada');
                }
            }
        });
    },
    rate: function rate(frm, cdt, cdn) {
        shs_purchase_receipt_calculation(frm, cdt, cdn);
    }
});

shs_sales_order_calculation = function shs_sales_order_calculation(frm, cdt, cdn) {

    refresh_field('items');

    this_company_sales_tax_var = cur_frm.doc.taxes[0].rate;

    var this_row_qty, this_row_rate, this_row_amount, this_row_conversion_factor, this_row_stock_qty, this_row_tax_rate, this_row_tax_amount, this_row_taxable_amount;

    frm.doc.items.forEach(function (item_row, index) {
        if (item_row.name == cdn) {
            this_row_amount = item_row.qty * item_row.rate;
            this_row_stock_qty = item_row.qty * item_row.conversion_factor;
            this_row_tax_rate = item_row.shs_so_tax_rate_per_uom;
            this_row_tax_amount = this_row_stock_qty * this_row_tax_rate;
            this_row_taxable_amount = this_row_amount - this_row_tax_amount;

            frm.doc.items[index].shs_so_other_tax_amount = item_row.shs_so_tax_rate_per_uom * (item_row.qty * item_row.conversion_factor);

            frm.doc.items[index].shs_so_amount_minus_excise_tax = item_row.qty * item_row.rate - item_row.qty * item_row.conversion_factor * item_row.shs_so_tax_rate_per_uom;
            console.log("uom that just changed is: " + item_row.uom);
            console.log("stock qty is: " + item_row.stock_qty);
            console.log("conversion_factor is: " + item_row.conversion_factor);
            if (item_row.shs_so_is_fuel == 1) {
                frm.doc.items[index].shs_so_gt_tax_net_fuel_amt = item_row.shs_so_amount_minus_excise_tax / (1 + this_company_sales_tax_var / 100);
                frm.doc.items[index].shs_so_sales_tax_for_this_row = item_row.shs_so_gt_tax_net_fuel_amt * (this_company_sales_tax_var / 100);

                total_fuel = 0;
                $.each(frm.doc.items || [], function (i, d) {
                    if (d.shs_so_is_fuel == true) {
                        total_fuel += flt(d.shs_so_gt_tax_net_fuel_amt);
                    };
                });
                frm.doc.shs_gt_tax_fuel = total_fuel;
            };
            if (item_row.shs_so_is_good == 1) {
                frm.doc.items[index].shs_so_gt_tax_net_goods_amt = item_row.shs_so_amount_minus_excise_tax / (1 + this_company_sales_tax_var / 100);
                frm.doc.items[index].shs_so_sales_tax_for_this_row = item_row.shs_so_gt_tax_net_goods_amt * (this_company_sales_tax_var / 100);

                total_goods = 0;
                $.each(frm.doc.items || [], function (i, d) {
                    if (d.shs_so_is_good == true) {
                        total_goods += flt(d.shs_so_gt_tax_net_goods_amt);
                    };
                });
                frm.doc.shs_so_gt_tax_goods = total_goods;
            };
            if (item_row.shs_so_is_service == 1) {
                frm.doc.items[index].shs_so_gt_tax_net_services_amt = item_row.shs_so_amount_minus_excise_tax / (1 + this_company_sales_tax_var / 100);
                frm.doc.items[index].shs_so_sales_tax_for_this_row = item_row.shs_so_gt_tax_net_services_amt * (this_company_sales_tax_var / 100);

                total_servi = 0;
                $.each(frm.doc.items || [], function (i, d) {
                    if (d.shs_so_is_service == true) {
                        total_servi += flt(d.shs_so_gt_tax_net_services_amt);
                    };
                });
                frm.doc.shs_so_gt_tax_services = total_servi;
            };
            full_tax_iva = 0;
            $.each(frm.doc.items || [], function (i, d) {
                full_tax_iva += flt(d.shs_so_sales_tax_for_this_row);
            });
            frm.doc.shs_so_total_iva = full_tax_iva;
        };
    });
};

frappe.ui.form.on("Sales Order", {
    refresh: function refresh(frm, cdt, cdn) {
        console.log('Exito Script In Sales Order');

        frm.add_custom_button("UOM Recalculation", function () {
            frm.doc.items.forEach(function (item) {
                console.log("item contains: " + item);

                shs_sales_order_calculation(frm, "Sales Order Item", item.name);
            });
        });
    },
    shs_so_nit: function shs_so_nit(frm, cdt, cdn) {
        valNit(frm.doc.shs_so_nit, frm.doc.customer, frm);
    },
    discount_amount: function discount_amount(frm, cdt, cdn) {
        tax_before_calc = frm.doc.shs_so_total_iva;
        console.log("El descuento total es:" + frm.doc.discount_amount);
        console.log("El IVA calculado anteriormente:" + frm.doc.shs_so_total_iva);
        discount_amount_net_value = frm.doc.discount_amount / (1 + cur_frm.doc.taxes[0].rate / 100);
        console.log("El neto sin iva del descuento es" + discount_amount_net_value);
        discount_amount_tax_value = discount_amount_net_value * (cur_frm.doc.taxes[0].rate / 100);
        console.log("El IVA del descuento es:" + discount_amount_tax_value);
        frm.doc.shs_so_total_iva = frm.doc.shs_so_total_iva - discount_amount_tax_value;
        console.log("El IVA ya sin el iva del descuento es ahora:" + frm.doc.shs_so_total_iva);
    },
    customer: function customer(frm, cdt, cdn) {
        this_company_sales_tax_var = cur_frm.doc.taxes[0].rate;
        console.log('Corrio supplier trigger y se cargo el IVA, el cual es ' + this_company_sales_tax_var);
    },
    before_save: function before_save(frm, cdt, cdn) {
        frm.doc.items.forEach(function (item) {
            console.log("item contains: " + item);

            shs_sales_order_calculation(frm, "Sales Order Item", item.name);
            tax_before_calc = frm.doc.shs_so_total_iva;
            console.log("El descuento total es:" + frm.doc.discount_amount);
            console.log("El IVA calculado anteriormente:" + frm.doc.shs_so_total_iva);
            discount_amount_net_value = frm.doc.discount_amount / (1 + cur_frm.doc.taxes[0].rate / 100);
            console.log("El neto sin iva del descuento es" + discount_amount_net_value);
            discount_amount_tax_value = discount_amount_net_value * (cur_frm.doc.taxes[0].rate / 100);
            console.log("El IVA del descuento es:" + discount_amount_tax_value);
            frm.doc.shs_so_total_iva = frm.doc.shs_so_total_iva - discount_amount_tax_value;
            console.log("El IVA ya sin el iva del descuento es ahora:" + frm.doc.shs_so_total_iva);
        });
    }
});

frappe.ui.form.on("Sales Order Item", {
    items_add: function items_add(frm, cdt, cdn) {},
    items_move: function items_move(frm, cdt, cdn) {},
    before_items_remove: function before_items_remove(frm, cdt, cdn) {},
    items_remove: function items_remove(frm, cdt, cdn) {
        fix_gt_tax_fuel = 0;
        fix_gt_tax_goods = 0;
        fix_gt_tax_services = 0;
        fix_gt_tax_iva = 0;

        $.each(frm.doc.items || [], function (i, d) {
            fix_gt_tax_fuel += flt(d.shs_so_gt_tax_net_fuel_amt);
            fix_gt_tax_goods += flt(d.shs_so_gt_tax_net_goods_amt);
            fix_gt_tax_services += flt(d.shs_so_gt_tax_net_services_amt);
            fix_gt_tax_iva += flt(d.shs_so_sales_tax_for_this_row);
        });

        cur_frm.set_value("shs_gt_tax_fuel", fix_gt_tax_fuel);
        cur_frm.set_value("shs_so_gt_tax_goods", fix_gt_tax_goods);
        cur_frm.set_value("shs_so_gt_tax_services", fix_gt_tax_services);
        cur_frm.set_value("shs_so_total_iva", fix_gt_tax_iva);
    },
    item_code: function item_code(frm, cdt, cdn) {
        this_company_sales_tax_var = cur_frm.doc.taxes[0].rate;
        console.log("If you can see this, tax rate variable now exists, and its set to: " + this_company_sales_tax_var);
        refresh_field('qty');
    },
    qty: function qty(frm, cdt, cdn) {
        shs_sales_order_calculation(frm, cdt, cdn);
        console.log("cdt contains: " + cdt);
        console.log("cdn contains: " + cdn);
    },
    uom: function uom(frm, cdt, cdn) {
        console.log("The unit of measure field was changed and the code from the trigger was run");
    },
    conversion_factor: function conversion_factor(frm, cdt, cdn) {
        console.log("El disparador de factor de conversión se corrió.");
        shs_sales_order_calculation(frm, cdt, cdn);
    },
    shs_so_tax_rate_per_uom_account: function shs_so_tax_rate_per_uom_account(frm, cdt, cdn) {
        frm.doc.items.forEach(function (item_row_i, index_i) {
            if (item_row_i.name == cdn) {
                var cuenta = item_row_i.shs_so_tax_rate_per_uom_account;
                if (cuenta !== null) {
                    if (buscar_account(frm, cuenta)) {
                        console.log('La cuenta ya existe');
                    } else {
                        console.log('La cuenta no existe, se agregara una nueva fila en taxes');
                        frappe.model.add_child(frm.doc, "Sales Taxes and Charges", "taxes");
                        frm.doc.taxes.forEach(function (item_row, index) {
                            if (item_row.account_head == undefined) {
                                frappe.call({
                                    method: "factura_electronica.api.get_data_tax_account",
                                    args: {
                                        name_account_tax_gt: cuenta
                                    },

                                    callback: function callback(data) {
                                        frm.doc.taxes[index].charge_type = 'On Net Total';
                                        frm.doc.taxes[index].account_head = cuenta;
                                        frm.doc.taxes[index].rate = data.message;

                                        frm.doc.taxes[index].description = 'Impuesto';
                                    }
                                });
                            }
                        });
                    }
                } else {
                    console.log('El producto seleccionado no tiene una cuenta asociada');
                }
            }
        });
    },
    rate: function rate(frm, cdt, cdn) {
        shs_sales_order_calculation(frm, cdt, cdn);
    }
});

shs_delivery_note_calculation = function shs_delivery_note_calculation(frm, cdt, cdn) {

    refresh_field('items');

    this_company_sales_tax_var = cur_frm.doc.taxes[0].rate;

    var this_row_qty, this_row_rate, this_row_amount, this_row_conversion_factor, this_row_stock_qty, this_row_tax_rate, this_row_tax_amount, this_row_taxable_amount;

    frm.doc.items.forEach(function (item_row, index) {
        if (item_row.name == cdn) {
            this_row_amount = item_row.qty * item_row.rate;
            this_row_stock_qty = item_row.qty * item_row.conversion_factor;
            this_row_tax_rate = item_row.shs_dn_tax_rate_per_uom;
            this_row_tax_amount = this_row_stock_qty * this_row_tax_rate;
            this_row_taxable_amount = this_row_amount - this_row_tax_amount;

            frm.doc.items[index].shs_dn_other_tax_amount = item_row.shs_dn_tax_rate_per_uom * (item_row.qty * item_row.conversion_factor);

            frm.doc.items[index].shs_dn_amount_minus_excise_tax = item_row.qty * item_row.rate - item_row.qty * item_row.conversion_factor * item_row.shs_dn_tax_rate_per_uom;
            console.log("uom that just changed is: " + item_row.uom);
            console.log("stock qty is: " + item_row.stock_qty);
            console.log("conversion_factor is: " + item_row.conversion_factor);
            if (item_row.shs_dn_is_fuel == 1) {
                frm.doc.items[index].shs_dn_gt_tax_net_fuel_amt = item_row.shs_dn_amount_minus_excise_tax / (1 + this_company_sales_tax_var / 100);
                frm.doc.items[index].shs_dn_sales_tax_for_this_row = item_row.shs_dn_gt_tax_net_fuel_amt * (this_company_sales_tax_var / 100);

                total_fuel = 0;
                $.each(frm.doc.items || [], function (i, d) {
                    if (d.shs_dn_is_fuel == true) {
                        total_fuel += flt(d.shs_dn_gt_tax_net_fuel_amt);
                    };
                });
                frm.doc.shs_dn_gt_tax_fuel = total_fuel;
            };
            if (item_row.shs_dn_is_good == 1) {
                frm.doc.items[index].shs_dn_gt_tax_net_goods_amt = item_row.shs_dn_amount_minus_excise_tax / (1 + this_company_sales_tax_var / 100);
                frm.doc.items[index].shs_dn_sales_tax_for_this_row = item_row.shs_dn_gt_tax_net_goods_amt * (this_company_sales_tax_var / 100);

                total_goods = 0;
                $.each(frm.doc.items || [], function (i, d) {
                    if (d.shs_dn_is_good == true) {
                        total_goods += flt(d.shs_dn_gt_tax_net_goods_amt);
                    };
                });
                frm.doc.shs_dn_gt_tax_goods = total_goods;
            };
            if (item_row.shs_dn_is_service == 1) {
                frm.doc.items[index].shs_dn_gt_tax_net_services_amt = item_row.shs_dn_amount_minus_excise_tax / (1 + this_company_sales_tax_var / 100);
                frm.doc.items[index].shs_dn_sales_tax_for_this_row = item_row.shs_dn_gt_tax_net_services_amt * (this_company_sales_tax_var / 100);

                total_servi = 0;
                $.each(frm.doc.items || [], function (i, d) {
                    if (d.shs_dn_is_service == true) {
                        total_servi += flt(d.shs_dn_gt_tax_net_services_amt);
                    };
                });
                frm.doc.shs_dn_gt_tax_services = total_servi;
            };
            full_tax_iva = 0;
            $.each(frm.doc.items || [], function (i, d) {
                full_tax_iva += flt(d.shs_dn_sales_tax_for_this_row);
            });
            frm.doc.shs_dn_total_iva = full_tax_iva;
        };
    });
};

frappe.ui.form.on("Delivery Note", {
    refresh: function refresh(frm, cdt, cdn) {
        console.log('Exito Script In Delivery Note');

        frm.add_custom_button("UOM Recalculation", function () {
            frm.doc.items.forEach(function (item) {
                console.log("item contains: " + item);

                shs_delivery_note_calculation(frm, "Delivery Note Item", item.name);
            });
        });
    },
    shs_dn_nit: function shs_dn_nit(frm, cdt, cdn) {
        valNit(frm.doc.shs_dn_nit, frm.doc.customer, frm);
    },
    discount_amount: function discount_amount(frm, cdt, cdn) {
        tax_before_calc = frm.doc.shs_dn_total_iva;
        console.log("El descuento total es:" + frm.doc.discount_amount);
        console.log("El IVA calculado anteriormente:" + frm.doc.shs_dn_total_iva);
        discount_amount_net_value = frm.doc.discount_amount / (1 + cur_frm.doc.taxes[0].rate / 100);
        console.log("El neto sin iva del descuento es" + discount_amount_net_value);
        discount_amount_tax_value = discount_amount_net_value * (cur_frm.doc.taxes[0].rate / 100);
        console.log("El IVA del descuento es:" + discount_amount_tax_value);
        frm.doc.shs_dn_total_iva = frm.doc.shs_dn_total_iva - discount_amount_tax_value;
        console.log("El IVA ya sin el iva del descuento es ahora:" + frm.doc.shs_dn_total_iva);
    },
    customer: function customer(frm, cdt, cdn) {
        this_company_sales_tax_var = cur_frm.doc.taxes[0].rate;
        console.log('Corrio customer trigger y se cargo el IVA, el cual es ' + this_company_sales_tax_var);
    },
    before_save: function before_save(frm, cdt, cdn) {
        frm.doc.items.forEach(function (item) {
            console.log("item contains: " + item);

            shs_delivery_note_calculation(frm, "Delivery Note Item", item.name);
            tax_before_calc = frm.doc.shs_dn_total_iva;
            console.log("El descuento total es:" + frm.doc.discount_amount);
            console.log("El IVA calculado anteriormente:" + frm.doc.shs_dn_total_iva);
            discount_amount_net_value = frm.doc.discount_amount / (1 + cur_frm.doc.taxes[0].rate / 100);
            console.log("El neto sin iva del descuento es" + discount_amount_net_value);
            discount_amount_tax_value = discount_amount_net_value * (cur_frm.doc.taxes[0].rate / 100);
            console.log("El IVA del descuento es:" + discount_amount_tax_value);
            frm.doc.shs_dn_total_iva = frm.doc.shs_dn_total_iva - discount_amount_tax_value;
            console.log("El IVA ya sin el iva del descuento es ahora:" + frm.doc.shs_dn_total_iva);
        });
    }
});

frappe.ui.form.on("Delivery Note Item", {
    items_add: function items_add(frm, cdt, cdn) {},
    items_move: function items_move(frm, cdt, cdn) {},
    before_items_remove: function before_items_remove(frm, cdt, cdn) {},
    items_remove: function items_remove(frm, cdt, cdn) {
        fix_gt_tax_fuel = 0;
        fix_gt_tax_goods = 0;
        fix_gt_tax_services = 0;
        fix_gt_tax_iva = 0;

        $.each(frm.doc.items || [], function (i, d) {
            fix_gt_tax_fuel += flt(d.shs_dn_gt_tax_net_fuel_amt);
            fix_gt_tax_goods += flt(d.shs_dn_gt_tax_net_goods_amt);
            fix_gt_tax_services += flt(d.shs_dn_gt_tax_net_services_amt);
            fix_gt_tax_iva += flt(d.shs_dn_sales_tax_for_this_row);
        });

        cur_frm.set_value("shs_dn_gt_tax_fuel", fix_gt_tax_fuel);
        cur_frm.set_value("shs_dn_gt_tax_goods", fix_gt_tax_goods);
        cur_frm.set_value("shs_dn_gt_tax_services", fix_gt_tax_services);
        cur_frm.set_value("shs_dn_total_iva", fix_gt_tax_iva);
    },
    item_code: function item_code(frm, cdt, cdn) {
        this_company_sales_tax_var = cur_frm.doc.taxes[0].rate;
        console.log("If you can see this, tax rate variable now exists, and its set to: " + this_company_sales_tax_var);
        refresh_field('qty');
    },
    qty: function qty(frm, cdt, cdn) {
        shs_delivery_note_calculation(frm, cdt, cdn);
        console.log("cdt contains: " + cdt);
        console.log("cdn contains: " + cdn);
    },
    uom: function uom(frm, cdt, cdn) {
        console.log("The unit of measure field was changed and the code from the trigger was run");
    },
    conversion_factor: function conversion_factor(frm, cdt, cdn) {
        console.log("El disparador de factor de conversión se corrió.");
        shs_delivery_note_calculation(frm, cdt, cdn);
    },
    shs_dn_tax_rate_per_uom_account: function shs_dn_tax_rate_per_uom_account(frm, cdt, cdn) {
        frm.doc.items.forEach(function (item_row_i, index_i) {
            if (item_row_i.name == cdn) {
                var cuenta = item_row_i.shs_dn_tax_rate_per_uom_account;
                if (cuenta !== null) {
                    if (buscar_account(frm, cuenta)) {
                        console.log('La cuenta ya existe');
                    } else {
                        console.log('La cuenta no existe, se agregara una nueva fila en taxes');
                        frappe.model.add_child(frm.doc, "Sales Taxes and Charges", "taxes");
                        frm.doc.taxes.forEach(function (item_row, index) {
                            if (item_row.account_head == undefined) {
                                frappe.call({
                                    method: "factura_electronica.api.get_data_tax_account",
                                    args: {
                                        name_account_tax_gt: cuenta
                                    },

                                    callback: function callback(data) {
                                        frm.doc.taxes[index].charge_type = 'On Net Total';
                                        frm.doc.taxes[index].account_head = cuenta;
                                        frm.doc.taxes[index].rate = data.message;

                                        frm.doc.taxes[index].description = 'Impuesto';
                                    }
                                });
                            }
                        });
                    }
                } else {
                    console.log('El producto seleccionado no tiene una cuenta asociada');
                }
            }
        });
    },
    rate: function rate(frm, cdt, cdn) {
        shs_delivery_note_calculation(frm, cdt, cdn);
    }
});

shs_supplier_quotation_calculation = function shs_supplier_quotation_calculation(frm, cdt, cdn) {

    refresh_field('items');

    this_company_sales_tax_var = cur_frm.doc.taxes[0].rate;

    var this_row_qty, this_row_rate, this_row_amount, this_row_conversion_factor, this_row_stock_qty, this_row_tax_rate, this_row_tax_amount, this_row_taxable_amount;

    frm.doc.items.forEach(function (item_row, index) {
        if (item_row.name == cdn) {
            this_row_amount = item_row.qty * item_row.rate;
            this_row_stock_qty = item_row.qty * item_row.conversion_factor;
            this_row_tax_rate = item_row.shs_spq_tax_rate_per_uom;
            this_row_tax_amount = this_row_stock_qty * this_row_tax_rate;
            this_row_taxable_amount = this_row_amount - this_row_tax_amount;

            frm.doc.items[index].shs_spq_other_tax_amount = item_row.shs_spq_tax_rate_per_uom * (item_row.qty * item_row.conversion_factor);

            frm.doc.items[index].shs_spq_amount_minus_excise_tax = item_row.qty * item_row.rate - item_row.qty * item_row.conversion_factor * item_row.shs_spq_tax_rate_per_uom;
            console.log("uom that just changed is: " + item_row.uom);
            console.log("stock qty is: " + item_row.stock_qty);
            console.log("conversion_factor is: " + item_row.conversion_factor);
            if (item_row.shs_spq_is_fuel == 1) {
                frm.doc.items[index].shs_spq_gt_tax_net_fuel_amt = item_row.shs_spq_amount_minus_excise_tax / (1 + this_company_sales_tax_var / 100);
                frm.doc.items[index].shs_spq_sales_tax_for_this_row = item_row.shs_spq_gt_tax_net_fuel_amt * (this_company_sales_tax_var / 100);

                total_fuel = 0;
                $.each(frm.doc.items || [], function (i, d) {
                    if (d.shs_spq_is_fuel == true) {
                        total_fuel += flt(d.shs_spq_gt_tax_net_fuel_amt);
                    };
                });
                frm.doc.shs_spq_gt_tax_fuel = total_fuel;
            };
            if (item_row.shs_spq_is_good == 1) {
                frm.doc.items[index].shs_spq_gt_tax_net_goods_amt = item_row.shs_spq_amount_minus_excise_tax / (1 + this_company_sales_tax_var / 100);
                frm.doc.items[index].shs_spq_sales_tax_for_this_row = item_row.shs_spq_gt_tax_net_goods_amt * (this_company_sales_tax_var / 100);

                total_goods = 0;
                $.each(frm.doc.items || [], function (i, d) {
                    if (d.shs_spq_is_good == true) {
                        total_goods += flt(d.shs_spq_gt_tax_net_goods_amt);
                    };
                });
                frm.doc.shs_spq_gt_tax_goods = total_goods;
            };
            if (item_row.shs_spq_is_service == 1) {
                frm.doc.items[index].shs_spq_gt_tax_net_services_amt = item_row.shs_spq_amount_minus_excise_tax / (1 + this_company_sales_tax_var / 100);
                frm.doc.items[index].shs_spq_sales_tax_for_this_row = item_row.shs_spq_gt_tax_net_services_amt * (this_company_sales_tax_var / 100);

                total_servi = 0;
                $.each(frm.doc.items || [], function (i, d) {
                    if (d.shs_spq_is_service == true) {
                        total_servi += flt(d.shs_spq_gt_tax_net_services_amt);
                    };
                });
                frm.doc.shs_spq_gt_tax_services = total_servi;
            };
            full_tax_iva = 0;
            $.each(frm.doc.items || [], function (i, d) {
                full_tax_iva += flt(d.shs_spq_sales_tax_for_this_row);
            });
            frm.doc.shs_spq_total_iva = full_tax_iva;
        };
    });
};

frappe.ui.form.on("Supplier Quotation", {
    refresh: function refresh(frm, cdt, cdn) {
        console.log('Exito Script In Supplier Quotation');

        frm.add_custom_button("UOM Recalculation", function () {
            frm.doc.items.forEach(function (item) {
                console.log("item contains: " + item);

                shs_supplier_quotation_calculation(frm, "Supplier Quotation Item", item.name);
            });
        });
    },
    shs_spq_nit: function shs_spq_nit(frm, cdt, cdn) {
        valNit(frm.doc.shs_spq_nit, frm.doc.supplier, frm);
    },
    discount_amount: function discount_amount(frm, cdt, cdn) {
        tax_before_calc = frm.doc.shs_spq_total_iva;
        console.log("El descuento total es:" + frm.doc.discount_amount);
        console.log("El IVA calculado anteriormente:" + frm.doc.shs_spq_total_iva);
        discount_amount_net_value = frm.doc.discount_amount / (1 + cur_frm.doc.taxes[0].rate / 100);
        console.log("El neto sin iva del descuento es" + discount_amount_net_value);
        discount_amount_tax_value = discount_amount_net_value * (cur_frm.doc.taxes[0].rate / 100);
        console.log("El IVA del descuento es:" + discount_amount_tax_value);
        frm.doc.shs_spq_total_iva = frm.doc.shs_spq_total_iva - discount_amount_tax_value;
        console.log("El IVA ya sin el iva del descuento es ahora:" + frm.doc.shs_spq_total_iva);
    },
    supplier: function supplier(frm, cdt, cdn) {
        this_company_sales_tax_var = cur_frm.doc.taxes[0].rate;
        console.log('Corrio customer trigger y se cargo el IVA, el cual es ' + this_company_sales_tax_var);
    },
    before_save: function before_save(frm, cdt, cdn) {
        frm.doc.items.forEach(function (item) {
            console.log("item contains: " + item);

            shs_delivery_note_calculation(frm, "Supplier Quotation Item", item.name);
            tax_before_calc = frm.doc.shs_spq_total_iva;
            console.log("El descuento total es:" + frm.doc.discount_amount);
            console.log("El IVA calculado anteriormente:" + frm.doc.shs_spq_total_iva);
            discount_amount_net_value = frm.doc.discount_amount / (1 + cur_frm.doc.taxes[0].rate / 100);
            console.log("El neto sin iva del descuento es" + discount_amount_net_value);
            discount_amount_tax_value = discount_amount_net_value * (cur_frm.doc.taxes[0].rate / 100);
            console.log("El IVA del descuento es:" + discount_amount_tax_value);
            frm.doc.shs_spq_total_iva = frm.doc.shs_spq_total_iva - discount_amount_tax_value;
            console.log("El IVA ya sin el iva del descuento es ahora:" + frm.doc.shs_spq_total_iva);
        });
    }
});

frappe.ui.form.on("Supplier Quotation Item", {
    items_add: function items_add(frm, cdt, cdn) {},
    items_move: function items_move(frm, cdt, cdn) {},
    before_items_remove: function before_items_remove(frm, cdt, cdn) {},
    items_remove: function items_remove(frm, cdt, cdn) {
        fix_gt_tax_fuel = 0;
        fix_gt_tax_goods = 0;
        fix_gt_tax_services = 0;
        fix_gt_tax_iva = 0;

        $.each(frm.doc.items || [], function (i, d) {
            fix_gt_tax_fuel += flt(d.shs_spq_gt_tax_net_fuel_amt);
            fix_gt_tax_goods += flt(d.shs_spq_gt_tax_net_goods_amt);
            fix_gt_tax_services += flt(d.shs_spq_gt_tax_net_services_amt);
            fix_gt_tax_iva += flt(d.shs_spq_sales_tax_for_this_row);
        });

        cur_frm.set_value("shs_spq_gt_tax_fuel", fix_gt_tax_fuel);
        cur_frm.set_value("shs_spq_gt_tax_goods", fix_gt_tax_goods);
        cur_frm.set_value("shs_spq_gt_tax_services", fix_gt_tax_services);
        cur_frm.set_value("shs_spq_total_iva", fix_gt_tax_iva);
    },
    item_code: function item_code(frm, cdt, cdn) {
        this_company_sales_tax_var = cur_frm.doc.taxes[0].rate;
        console.log("If you can see this, tax rate variable now exists, and its set to: " + this_company_sales_tax_var);
        refresh_field('qty');
    },
    qty: function qty(frm, cdt, cdn) {
        shs_supplier_quotation_calculation(frm, cdt, cdn);
        console.log("cdt contains: " + cdt);
        console.log("cdn contains: " + cdn);
    },
    uom: function uom(frm, cdt, cdn) {
        console.log("The unit of measure field was changed and the code from the trigger was run");
    },
    conversion_factor: function conversion_factor(frm, cdt, cdn) {
        console.log("El disparador de factor de conversión se corrió.");
        shs_supplier_quotation_calculation(frm, cdt, cdn);
    },
    shs_spq_tax_rate_per_uom_account: function shs_spq_tax_rate_per_uom_account(frm, cdt, cdn) {
        frm.doc.items.forEach(function (item_row_i, index_i) {
            if (item_row_i.name == cdn) {
                var cuenta = item_row_i.shs_spq_tax_rate_per_uom_account;
                if (cuenta !== null) {
                    if (buscar_account(frm, cuenta)) {
                        console.log('La cuenta ya existe');
                    } else {
                        console.log('La cuenta no existe, se agregara una nueva fila en taxes');
                        frappe.model.add_child(frm.doc, "Sales Taxes and Charges", "taxes");
                        frm.doc.taxes.forEach(function (item_row, index) {
                            if (item_row.account_head == undefined) {
                                frappe.call({
                                    method: "factura_electronica.api.get_data_tax_account",
                                    args: {
                                        name_account_tax_gt: cuenta
                                    },

                                    callback: function callback(data) {
                                        frm.doc.taxes[index].charge_type = 'On Net Total';
                                        frm.doc.taxes[index].account_head = cuenta;
                                        frm.doc.taxes[index].rate = data.message;

                                        frm.doc.taxes[index].description = 'Impuesto';
                                    }
                                });
                            }
                        });
                    }
                } else {
                    console.log('El producto seleccionado no tiene una cuenta asociada');
                }
            }
        });
    },
    rate: function rate(frm, cdt, cdn) {
        shs_supplier_quotation_calculation(frm, cdt, cdn);
    }
});