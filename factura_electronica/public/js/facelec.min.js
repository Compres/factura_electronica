

console.log("Se cargo exitosamente la aplicación de Factura Electrónica");

function valNit(nit, cus_supp, frm) {
	if (nit === "C/F" || nit === "c/f") {
		frm.enable_save();
	} else {
		var nd,
		    add = 0;
		if (nd = /^(\d+)\-?([\dk])$/i.exec(nit)) {
			nd[2] = nd[2].toLowerCase() == 'k' ? 10 : parseInt(nd[2]);
			for (var i = 0; i < nd[1].length; i++) {
				add += ((i - nd[1].length) * -1 + 1) * nd[1][i];
			}
			nit_validado = (11 - add % 11) % 11 == nd[2];
		} else {
			nit_validado = false;
		}

		if (nit_validado === false) {
			msgprint('NIT de: <b>' + cus_supp + '</b>, no es correcto. Si no tiene disponible el NIT modifiquelo a <b>C/F</b>');
			frm.disable_save();
		}
		if (nit_validado === true) {
			frm.enable_save();
		}
	}
}

frappe.ui.form.on("Item", {
	facelec_is_fuel: function facelec_is_fuel(frm, cdt, cdn) {
		if (frm.doc.facelec_is_fuel) {
			cur_frm.set_value("facelec_is_good", 0);
			cur_frm.set_value("facelec_is_service", 0);
		}
	},
	facelec_is_good: function facelec_is_good(frm, cdt, cdn) {
		if (frm.doc.facelec_is_good) {
			cur_frm.set_value("facelec_is_fuel", 0);
			cur_frm.set_value("facelec_is_service", 0);
		}
	},
	facelec_is_service: function facelec_is_service(frm, cdt, cdn) {
		if (frm.doc.facelec_is_service) {
			cur_frm.set_value("facelec_is_fuel", 0);
			cur_frm.set_value("facelec_is_good", 0);
		}
	}
});

function facelec_tax_calc_new(frm, cdt, cdn) {
    if (typeof cur_frm.doc.taxes[0].rate == "undefined") {} else {
        this_company_sales_tax_var = cur_frm.doc.taxes[0].rate;
    }

    var this_row_amount = 0;

    var this_row_stock_qty = 0;
    var this_row_tax_rate = 0;
    var this_row_tax_amount = 0;
    var this_row_taxable_amount = 0;

    frm.doc.items.forEach(function (item_row, index) {
        if (item_row.name === cdn) {
            this_row_amount = item_row.amount;

            this_row_stock_qty = item_row.stock_qty;

            this_row_tax_rate = item_row.facelec_tax_rate_per_uom;

            this_row_tax_amount = item_row.stock_qty * item_row.facelec_tax_rate_per_uom;

            this_row_taxable_amount = item_row.amount - item_row.stock_qty * item_row.facelec_tax_rate_per_uom;

            frm.doc.items[index].facelec_other_tax_amount = item_row.facelec_tax_rate_per_uom * (item_row.qty * item_row.conversion_factor);
            frm.doc.items[index].facelec_amount_minus_excise_tax = item_row.qty * item_row.rate - item_row.stock_qty * item_row.facelec_tax_rate_per_uom;

            frm.refresh_field("items");

            frm.refresh_field("conversion_factor");

            if (item_row.factelecis_fuel) {
                frm.doc.items[index].facelec_gt_tax_net_fuel_amt = item_row.facelec_amount_minus_excise_tax / (1 + this_company_sales_tax_var / 100);
                frm.doc.items[index].facelec_sales_tax_for_this_row = item_row.facelec_gt_tax_net_fuel_amt * (this_company_sales_tax_var / 100);
            };
            if (item_row.facelec_is_good) {
                frm.doc.items[index].facelec_gt_tax_net_goods_amt = item_row.facelec_amount_minus_excise_tax / (1 + this_company_sales_tax_var / 100);
                frm.doc.items[index].facelec_sales_tax_for_this_row = item_row.facelec_gt_tax_net_goods_amt * (this_company_sales_tax_var / 100);
            };
            if (item_row.facelec_is_service) {
                frm.doc.items[index].facelec_gt_tax_net_services_amt = item_row.facelec_amount_minus_excise_tax / (1 + this_company_sales_tax_var / 100);
                frm.doc.items[index].facelec_sales_tax_for_this_row = item_row.facelec_gt_tax_net_services_amt * (this_company_sales_tax_var / 100);
            };
        };
    });
}

function each_item(frm, cdt, cdn) {
    frm.doc.items.forEach(function (item) {
        tax_before_calc = frm.doc.facelec_total_iva;

        discount_amount_net_value = frm.doc.discount_amount / (1 + cur_frm.doc.taxes[0].rate / 100);
        if (typeof cur_frm.doc.taxes[0].rate == "NaN") {} else {
            discount_amount_tax_value = discount_amount_net_value * (cur_frm.doc.taxes[0].rate / 100);

            frm.doc.facelec_total_iva = frm.doc.facelec_total_iva - discount_amount_tax_value;
        }
        facelec_tax_calc_new(frm, "Sales Invoice Item", item.name);
        facelec_otros_impuestos_fila(frm, "Sales Invoice Item", item.name);
    });
}

function agregar_fila(doc, table_name, doctype, position) {
    if (position > doc[table_name].length) {
        var row = frappe.model.add_child(doc, doctype, table_name);
        return row;
    } else if (position < doc[table_name][0].idx) {
            var row = frappe.model.add_child(doc, doctype, table_name);
            row.idx = position;
            return row;
        } else {
                for (var curr_pos = position; curr_pos < doc[table_name].length; curr_pos++) {
                    doc[table_name][curr_pos].idx += 1;
                }
                var row = frappe.model.add_child(doc, doctype, table_name);
                row.idx = position;
                return row;
            }
}

function facelec_add_taxes(frm, tax_account) {
    var total_sumatoria = 0;

    $.each(frm.doc.items || [], function (i, d) {
        if (d.facelec_tax_rate_per_uom_account === tax_account) {
            total_sumatoria += flt(d.facelec_other_tax_amount);
        };
    });

    return total_sumatoria;
}

function sumar_otros_impuestos_shs(frm, cdt, cdn) {
    frm.doc.items.forEach(function (item_row_1, index_1) {

        if (item_row_1.name === cdn) {
            if (item_row_1.facelec_tax_rate_per_uom_account) {

                frm.doc.shs_otros_impuestos.forEach(function (tax_row_2, index_2) {
                    if (tax_row_2.account_head === item_row_1.facelec_tax_rate_per_uom_account) {
                        var totalizador = 0;
                        totalizador = facelec_add_taxes(frm, tax_row_2.account_head);
                        cur_frm.doc.shs_otros_impuestos[index_2].total = totalizador;
                        shs_total_other_tax(frm);
                    }
                });
            }
        }
    });
}

function shs_total_other_tax(frm) {
    var total_tax = 0;

    $.each(frm.doc.shs_otros_impuestos || [], function (i, d) {
        if (d.account_head) {
            total_tax += flt(d.total);
        };
    });

    cur_frm.set_value('shs_total_otros_imp_incl', total_tax);
    frm.refresh_field("shs_total_otros_imp_incl");
}

function facelec_otros_impuestos_fila(frm, cdt, cdn) {
    var this_row_tax_amount = 0;
    var this_row_taxable_amount = 0;
    var shs_otro_impuesto = 0;
    var total_suma_impuesto = 0;

    frm.doc.items.forEach(function (item_row_i, indice) {
        if (item_row_i.name === cdn) {
            this_row_tax_amount = item_row_i.stock_qty * item_row_i.facelec_tax_rate_per_uom;

            shs_otro_impuesto = item_row_i.facelec_other_tax_amount;

            var cuenta = item_row_i.facelec_tax_rate_per_uom_account;

            frm.refresh_field('items');
            frm.refresh_field('conversion_factor');

            if (cuenta) {
                otro_impuesto = this_row_tax_amount;


                if (!buscar_account(frm, cuenta)) {
                    frappe.model.add_child(cur_frm.doc, "Otros Impuestos Factura Electronica", "shs_otros_impuestos");

                    cur_frm.refresh_field('items');

                    frm.doc.shs_otros_impuestos.forEach(function (tax_row, index) {
                        if (tax_row.account_head === undefined) {
                            cur_frm.doc.shs_otros_impuestos[index].account_head = cuenta;
                            cur_frm.doc.shs_otros_impuestos[index].total = shs_otro_impuesto;

                            cur_frm.refresh_field("shs_otros_impuestos");

                            sumar_otros_impuestos_shs(frm, cdt, cdn);
                            cur_frm.refresh_field("shs_otros_impuestos");
                        }
                    });
                } else {
                    sumar_otros_impuestos_shs(frm, cdt, cdn);
                    cur_frm.refresh_field("shs_otros_impuestos");
                }
            }
        }
    });
}

function totalizar_valores(frm, cdn, tax_account_n, otro_impuesto) {
    console.log('Otro Impuesto recibido es : ' + otro_impuesto);

    frm.doc.items.forEach(function (item_row, i1) {
        if (item_row.facelec_tax_rate_per_uom_account === tax_account_n) {
            var total = facelec_add_taxes(frm, tax_account_n) - otro_impuesto;

            frm.doc.shs_otros_impuestos.forEach(function (tax_row, i2) {
                if (tax_row.account_head === tax_account_n) {
                    cur_frm.doc.shs_otros_impuestos[i2].total = total;
                    cur_frm.refresh_field("shs_otros_impuestos");
                    shs_total_other_tax(frm);
                    cur_frm.refresh_field("shs_otros_impuestos");

                    if (tax_row.total === 0) {
                        cur_frm.doc.shs_otros_impuestos.splice(cur_frm.doc.shs_otros_impuestos[i2], 1);
                        cur_frm.refresh_field("shs_otros_impuestos");
                    }
                }
            });
        }
    });
}

function buscar_account(frm, cuenta_b) {
    var estado = false;

    $.each(frm.doc.shs_otros_impuestos || [], function (i, d) {
        if (d.account_head === cuenta_b) {
            estado = true;
        }
    });

    return estado;
}

function pdf_button(cae_documento, frm) {
    frm.add_custom_button(__("VER PDF FACTURA ELECTRONICA"), function () {
        window.open("https://www.ingface.net/Ingfacereport/dtefactura.jsp?cae=" + cae_documento);
    }).addClass("btn-primary");
}

function guardar_pdf(frm) {
    frm.add_custom_button(__('GUARDAR PDF'), function () {
        frappe.call({
            method: "factura_electronica.api.guardar_pdf_servidor",
            args: {
                nombre_archivo: frm.doc.name,
                cae_de_factura_electronica: frm.doc.cae_factura_electronica
            },
            callback: function callback() {
                frm.reload_doc();
            }
        });
    }).addClass("btn-primary");
}

function eliminar_pdf() {
    frm.add_custom_button(__('ELIMINAR PDF'), function () {
        frappe.call({
            method: "factura_electronica.api.guardar_pdf_servidor",
            args: {
                nombre_archivo: frm.doc.name,
                cae_de_factura_electronica: frm.doc.cae_factura_electronica
            },
            callback: function callback() {
                frm.reload_doc();
            }
        });
    }).addClass("btn-primary");
}

function generar_boton_factura(tipo_factura, frm) {
    frm.add_custom_button(__(tipo_factura), function () {
        frm.reload_doc();
        var serie_de_factura = frm.doc.name;

        var mi_url = window.location.href;
        frappe.call({
            method: "factura_electronica.api.generar_factura_electronica",
            args: {
                serie_factura: frm.doc.name,
                nombre_cliente: frm.doc.customer,
                pre_se: frm.doc.naming_series
            },

            callback: function callback(data) {
                if (data.message !== undefined) {
                    var url_nueva = mi_url.replace(serie_de_factura, data.message);

                    window.location.assign(url_nueva);

                    frm.reload_doc();
                }
            }
        });
    }).addClass("btn-primary");
}

function generar_factura_sin_btn(frm) {
    frm.reload_doc();
    var serie_de_factura = frm.doc.name;

    var mi_url = window.location.href;
    frappe.call({
        method: "factura_electronica.api.generar_factura_electronica",
        args: {
            serie_factura: frm.doc.name,
            nombre_cliente: frm.doc.customer,
            pre_se: frm.doc.naming_series
        },

        callback: function callback(data) {
            if (data.message !== undefined) {
                var url_nueva = mi_url.replace(serie_de_factura, data.message);

                window.location.assign(url_nueva);
                frm.reload_doc();
            } else {
                frm.reload_doc();
            }
        }
    });
}

function verificacionCAE(modalidad, frm, cdt, cdn) {
    if (frm.doc.status === "Paid" || frm.doc.status === "Unpaid" || frm.doc.status === "Submitted" || frm.doc.status === "Overdue") {
        if (frm.doc.cae_factura_electronica) {
            cur_frm.clear_custom_buttons();
            pdf_button(frm.doc.cae_factura_electronica, frm);
            guardar_pdf(frm);
        } else {
            if (modalidad === 'manual') {
                generar_boton_factura('Factura Electronica', frm);
            }

            if (modalidad === 'automatico') {
                generar_factura_sin_btn(frm);
            }
        }
    }

    if (frm.doc.status === "Return") {
        if (frm.doc.cae_factura_electronica) {
            cur_frm.clear_custom_buttons();
            pdf_button(frm.doc.cae_factura_electronica, frm);
            guardar_pdf(frm);
        } else {
            if (modalidad === 'manual') {
                generar_boton_factura('Nota Credito Electronica', frm);
            }

            if (modalidad === 'automatico') {
                generar_factura_sin_btn(frm);
            }
        }
    }

    if (frm.doc.status === "Paid" || frm.doc.status === "Unpaid" || frm.doc.status === "Submitted" || frm.doc.status === "Overdue") {
        if (frm.doc.es_nota_de_debito) {
            cur_frm.clear_custom_buttons('Factura Electronica');
            if (frm.doc.cae_factura_electronica) {
                cur_frm.clear_custom_buttons();
                pdf_button(frm.doc.cae_factura_electronica, frm);
                guardar_pdf(frm);
            } else {
                if (modalidad === 'manual') {
                    generar_boton_factura('Nota Debito Electronica', frm);
                }

                if (modalidad === 'automatico') {
                    generar_factura_sin_btn(frm);
                }
            }
        }
    }

    if (frm.doc.status === 'Draft') {
        cur_frm.set_value("cae_factura_electronica", '');
        cur_frm.set_value("serie_original_del_documento", '');
    }
}

frappe.ui.form.on("Sales Invoice", {
    onload_post_render: function onload_post_render(frm, cdt, cdn) {
        frm.fields_dict.items.grid.wrapper.on('click focusout blur', 'input[data-fieldname="item_code"][data-doctype="Sales Invoice Item"]', function (e) {

            each_item(frm, cdt, cdn);
            facelec_tax_calc_new(frm, cdt, cdn);
        });

        frm.fields_dict.items.grid.wrapper.on('click', 'input[data-fieldname="uom"][data-doctype="Sales Invoice Item"]', function (e) {
            each_item(frm, cdt, cdn);
        });
        frm.fields_dict.items.grid.wrapper.on('blur focusout', 'input[data-fieldname="uom"][data-doctype="Sales Invoice Item"]', function (e) {
            each_item(frm, cdt, cdn);
        });

        frm.fields_dict.items.grid.wrapper.on('mouseleave', 'input[data-fieldname="uom"][data-doctype="Sales Invoice Item"]', function (e) {
            facelec_tax_calc_new(frm, cdt, cdn);
        });

        frm.fields_dict.items.grid.wrapper.on('focus', 'input[data-fieldname="item_name"][data-doctype="Sales Invoice Item"]', function (e) {
            each_item(frm, cdt, cdn);
            facelec_otros_impuestos_fila(frm, cdt, cdn);
        });
        frm.fields_dict.items.grid.wrapper.on('blur focusout', 'input[data-fieldname="qty"][data-doctype="Sales Invoice Item"]', function (e) {
            each_item(frm, cdt, cdn);
        });

        frm.fields_dict.items.grid.wrapper.on('mouseleave', 'input[data-fieldname="qty"][data-doctype="Sales Invoice Item"]', function (e) {
            each_item(frm, cdt, cdn);
            facelec_tax_calc_new(frm, cdt, cdn);
        });

        frm.fields_dict.items.grid.wrapper.on('blur focusout', 'input[data-fieldname="conversion_factor"][data-doctype="Sales Invoice Item"]', function (e) {
            each_item(frm, cdt, cdn);
            cur_frm.refresh_field("conversion_factor");
        });

        frm.fields_dict.items.grid.wrapper.on('keyup mouseleave focusout', 'input[data-fieldname="conversion_factor"][data-doctype="Sales Invoice Item"]', function (e) {
            facelec_tax_calc_new(frm, cdt, cdn);
            each_item(frm, cdt, cdn);
            cur_frm.refresh_field("conversion_factor");
        });
        frm.fields_dict.items.grid.wrapper.on('blur', 'input[data-fieldname="rate"][data-doctype="Sales Invoice Item"]', function (e) {});

        cur_frm.fields_dict.customer.$input.on("keyup", function (evt) {
            facelec_tax_calc_new(frm, cdt, cdn);
            each_item(frm, cdt, cdn);
            refresh_field('qty');
        });

        cur_frm.fields_dict.customer.$input.on("mouseleave blur focusout", function (evt) {
            facelec_tax_calc_new(frm, cdt, cdn);
        });

        cur_frm.fields_dict.taxes_and_charges.$input.on("focusout", function (evt) {
            facelec_tax_calc_new(frm, cdt, cdn);
            facelec_otros_impuestos_fila(frm, cdt, cdn);
        });
    },
    customer: function customer(frm, cdt, cdn) {},
    refresh: function refresh(frm, cdt, cdn) {
        cur_frm.add_fetch("customer", "nit_face_customer", "nit_face_customer");

        frm.add_custom_button("UOM Recalculation", function () {
            frm.doc.items.forEach(function (item) {
                facelec_tax_calc_new(frm, "Sales Invoice Item", item.name);
            });
        });

        verificacionCAE('manual', frm, cdt, cdn);
    },
    nit_face_customer: function nit_face_customer(frm, cdt, cdn) {
        valNit(frm.doc.nit_face_customer, frm.doc.customer, frm);
    },
    taxes_and_charges: function taxes_and_charges(frm, cdt, cdn) {},
    additional_discount_percentage: function additional_discount_percentage(frm, cdt, cdn) {},
    discount_amount: function discount_amount(frm, cdt, cdn) {
        tax_before_calc = frm.doc.facelec_total_iva;

        discount_amount_net_value = frm.doc.discount_amount / (1 + cur_frm.doc.taxes[0].rate / 100);

        if (discount_amount_net_value == NaN || discount_amount_net_value == undefined) {} else {
            discount_amount_tax_value = discount_amount_net_value * (cur_frm.doc.taxes[0].rate / 100);

            frm.doc.facelec_total_iva = frm.doc.facelec_total_iva - discount_amount_tax_value;
        }
    },
    before_save: function before_save(frm, cdt, cdn) {
        each_item(frm, cdt, cdn);
        facelec_otros_impuestos_fila(frm, cdt, cdn);
    },
    on_submit: function on_submit(frm, cdt, cdn) {
        var cuentas_registradas = {};

        frm.doc.shs_otros_impuestos.forEach(function (tax_row, index) {
            if (tax_row.account_head) {
                cuentas_registradas[tax_row.account_head] = tax_row.total;
            };
        });

        if (Object.keys(cuentas_registradas).length > 0) {
            frappe.call({
                method: "factura_electronica.special_tax.add_gl_entry_other_special_tax",
                args: {
                    invoice_name: frm.doc.name,
                    accounts: cuentas_registradas
                },

                callback: function callback() {
                    frappe.call({
                        method: "factura_electronica.api.obtenerConfiguracionManualAutomatica",
                        callback: function callback(data) {
                            if (data.message === 'Manual') {}
                            if (data.message === 'Automatico') {
                                verificacionCAE('automatico', frm, cdt, cdn);
                            }
                        }
                    });
                }
            });
        } else {
            frappe.call({
                method: "factura_electronica.api.obtenerConfiguracionManualAutomatica",
                callback: function callback(data) {
                    if (data.message === 'Manual') {}
                    if (data.message === 'Automatico') {
                        verificacionCAE('automatico', frm, cdt, cdn);
                    }
                }
            });
        }
    },
    naming_series: function naming_series(frm, cdt, cdn) {
        frappe.call({
            method: "factura_electronica.api.obtener_numero_resolucion",
            args: {
                nombre_serie: frm.doc.naming_series
            },

            callback: function callback(numero_resolucion) {
                if (numero_resolucion.message === undefined) {
                    cur_frm.set_value('shs_numero_resolucion', '');
                } else {
                    cur_frm.set_value('shs_numero_resolucion', numero_resolucion.message);
                }
            }
        });
    }
});

frappe.ui.form.on("Sales Invoice Item", {
    items_add: function items_add(frm, cdt, cdn) {},
    items_move: function items_move(frm, cdt, cdn) {},
    before_items_remove: function before_items_remove(frm, cdt, cdn) {
        frm.doc.items.forEach(function (item_row_1, index_1) {
            if (item_row_1.name == cdn) {
                totalizar_valores(frm, cdn, item_row_1.facelec_tax_rate_per_uom_account, item_row_1.facelec_other_tax_amount);
            }
        });
    },
    items_remove: function items_remove(frm, cdt, cdn) {},
    item_code: function item_code(frm, cdt, cdn) {
        each_item(frm, cdt, cdn);
    },
    qty: function qty(frm, cdt, cdn) {
        facelec_tax_calc_new(frm, cdt, cdn);
    },
    uom: function uom(frm, cdt, cdn) {},
    conversion_factor: function conversion_factor(frm, cdt, cdn) {
        facelec_tax_calc_new(frm, cdt, cdn);
    },
    facelec_tax_rate_per_uom_account: function facelec_tax_rate_per_uom_account(frm, cdt, cdn) {},
    rate: function rate(frm, cdt, cdn) {
        facelec_tax_calc_new(frm, cdt, cdn);
    }
});

console.log("Hello world from Delivery Note");

console.log("Hello world from Sales Order");

console.log("Hello world from Sales Quotation");

function shs_quotation_calculation(frm, cdt, cdn) {
    if (typeof cur_frm.doc.taxes[0].rate == "undefined") {} else {
        var this_company_sales_tax_var = cur_frm.doc.taxes[0].rate;
    }

    var this_row_amount = 0;
    var this_row_stock_qty = 0;
    var this_row_tax_rate = 0;
    var this_row_tax_amount = 0;
    var this_row_taxable_amount = 0;

    frm.doc.items.forEach(function (item_row, index) {
        if (item_row.name === cdn) {
            this_row_amount = item_row.amount;

            this_row_stock_qty = item_row.stock_qty;

            this_row_tax_rate = item_row.facelec_qt_tax_rate_per_uom;

            this_row_tax_amount = item_row.stock_qty * item_row.facelec_qt_tax_rate_per_uom;

            this_row_taxable_amount = item_row.amount - item_row.stock_qty * item_row.facelec_qt_tax_rate_per_uom;

            frm.doc.items[index].facelec_qt_other_tax_amount = item_row.facelec_qt_tax_rate_per_uom * (item_row.qty * item_row.conversion_factor);
            frm.doc.items[index].facelec_qt_amount_minus_excise_tax = item_row.qty * item_row.rate - item_row.stock_qty * item_row.facelec_qt_tax_rate_per_uom;

            frm.refresh_field("items");
            frm.refresh_field("conversion_factor");

            if (item_row.facelec_qt_is_fuel) {
                frm.doc.items[index].facelec_qt_gt_tax_net_fuel_amt = item_row.facelec_qt_amount_minus_excise_tax / (1 + this_company_sales_tax_var / 100);
                frm.doc.items[index].facelec_qt_sales_tax_for_this_row = item_row.facelec_qt_gt_tax_net_fuel_amt * (this_company_sales_tax_var / 100);
            };

            if (item_row.facelec_qt_is_good) {
                frm.doc.items[index].facelec_qt_gt_tax_net_goods_amt = item_row.facelec_qt_amount_minus_excise_tax / (1 + this_company_sales_tax_var / 100);
                frm.doc.items[index].facelec_qt_sales_tax_for_this_row = item_row.facelec_qt_gt_tax_net_goods_amt * (this_company_sales_tax_var / 100);
            };

            if (item_row.facelec_qt_is_service) {
                frm.doc.items[index].facelec_qt_gt_tax_net_services_amt = item_row.facelec_qt_amount_minus_excise_tax / (1 + this_company_sales_tax_var / 100);
                frm.doc.items[index].facelec_qt_sales_tax_for_this_row = item_row.facelec_qt_gt_tax_net_services_amt * (this_company_sales_tax_var / 100);
            };
        };
    });
}

function each_item_quotation(frm, cdt, cdn) {
    frm.doc.items.forEach(function (item) {
        var discount_amount_net_value = frm.doc.discount_amount / (1 + cur_frm.doc.taxes[0].rate / 100);
        if (typeof cur_frm.doc.taxes[0].rate == "NaN") {} else {
            discount_amount_tax_value = discount_amount_net_value * (cur_frm.doc.taxes[0].rate / 100);
        }
        shs_quotation_calculation(frm, "Quotation Item", item.name);
        catizacion_otros_impuestos_fila(frm, "Quotation Item", item.name);
    });
}

function quotation_add_taxes(frm, tax_account) {
    var total_sumatoria = 0;

    $.each(frm.doc.items || [], function (i, d) {
        if (d.facelec_qt_tax_rate_per_uom_account === tax_account) {
            total_sumatoria += flt(d.facelec_qt_other_tax_amount);
        };
    });

    return total_sumatoria;
}

function sumar_otros_impuestos_cotizacion(frm, cdt, cdn) {
    frm.doc.items.forEach(function (item_row_1, index_1) {

        if (item_row_1.name === cdn) {
            if (item_row_1.facelec_qt_tax_rate_per_uom_account) {
                frm.doc.shs_tax_quotation.forEach(function (tax_row_2, index_2) {
                    if (tax_row_2.account_head === item_row_1.facelec_qt_tax_rate_per_uom_account) {
                        var totalizador = 0;
                        totalizador = quotation_add_taxes(frm, tax_row_2.account_head);
                        cur_frm.doc.shs_tax_quotation[index_2].total = totalizador;
                        shs_total_other_tax_quotation(frm);
                    }
                });
            }
        }
    });
}

function shs_total_other_tax_quotation(frm) {
    var total_tax = 0;

    $.each(frm.doc.shs_tax_quotation || [], function (i, d) {
        if (d.account_head) {
            total_tax += flt(d.total);
        };
    });

    cur_frm.set_value('shs_qt_total_otros_imp_incl', total_tax);
    frm.refresh_field("shs_qt_total_otros_imp_incl");
}

function catizacion_otros_impuestos_fila(frm, cdt, cdn) {
    var this_row_tax_amount = 0;
    var this_row_taxable_amount = 0;
    var shs_otro_impuesto = 0;
    var total_suma_impuesto = 0;

    frm.doc.items.forEach(function (item_row_i, indice) {
        if (item_row_i.name === cdn) {
            this_row_tax_amount = item_row_i.stock_qty * item_row_i.qt_tax_rate_per_uom;

            shs_otro_impuesto = item_row_i.facelec_qt_other_tax_amount;

            var cuenta = item_row_i.facelec_qt_tax_rate_per_uom_account;
            console.log('Cuenta de item encontrada es : ' + cuenta);

            frm.refresh_field('items');
            frm.refresh_field('conversion_factor');

            if (cuenta) {
                otro_impuesto = this_row_tax_amount;


                if (!buscar_account(frm, cuenta)) {
                    frappe.model.add_child(cur_frm.doc, "Otros Impuestos Factura Electronica", "shs_tax_quotation");

                    cur_frm.refresh_field('items');

                    frm.doc.shs_tax_quotation.forEach(function (tax_row, index) {
                        if (tax_row.account_head === undefined) {
                            cur_frm.doc.shs_tax_quotation[index].account_head = cuenta;
                            cur_frm.doc.shs_tax_quotation[index].total = shs_otro_impuesto;

                            cur_frm.refresh_field("shs_tax_quotation");

                            sumar_otros_impuestos_cotizacion(frm, cdt, cdn);
                            cur_frm.refresh_field("shs_tax_quotation");
                        }
                    });
                } else {
                    sumar_otros_impuestos_cotizacion(frm, cdt, cdn);
                    cur_frm.refresh_field("shs_tax_quotation");
                }
            }
        }
    });
}

function totalizar_valores_quotation(frm, cdn, tax_account_n) {
    frm.doc.items.forEach(function (item_row, i1) {
        if (item_row.facelec_qt_tax_rate_per_uom_account === tax_account_n) {
            total = quotation_add_taxes(frm, tax_account_n);

            frm.doc.shs_tax_quotation.forEach(function (tax_row, i2) {
                if (tax_row.account_head === tax_account_n) {
                    var total = 0;
                    cur_frm.refresh_field("shs_tax_quotation");
                    cur_frm.doc.shs_tax_quotation[i2].total = total;
                    shs_total_other_tax_quotation(frm);
                    cur_frm.refresh_field("shs_tax_quotation");

                    if (tax_row.total === 0) {
                        cur_frm.doc.shs_tax_quotation.splice(cur_frm.doc.shs_tax_quotation[i2], 1);
                        cur_frm.refresh_field("shs_tax_quotation");
                    }
                }
            });
        }
    });
}

function buscar_cuenta_cotizacion(frm, cuenta_b) {
    var estado = false;

    $.each(frm.doc.shs_tax_quotation || [], function (i, d) {
        if (d.account_head === cuenta_b) {
            estado = true;
        }
    });

    return estado;
}

frappe.ui.form.on("Quotation", {
    onload_post_render: function onload_post_render(frm, cdt, cdn) {
        console.log('Funcionando Onload Post Render Trigger');
        frm.fields_dict.items.grid.wrapper.on('click focusout blur', 'input[data-fieldname="item_code"][data-doctype="Quotation Item"]', function (e) {
            console.log("Clicked on the field Item Code");

            each_item_quotation(frm, cdt, cdn);
            shs_quotation_calculation(frm, cdt, cdn);
        });

        frm.fields_dict.items.grid.wrapper.on('click', 'input[data-fieldname="uom"][data-doctype="Quotation Item"]', function (e) {
            console.log("Click on the UOM field");
            each_item_quotation(frm, cdt, cdn);
        });
        frm.fields_dict.items.grid.wrapper.on('blur focusout', 'input[data-fieldname="uom"][data-doctype="Quotation Item"]', function (e) {
            console.log("Blur or focusout from the UOM field");
            each_item_quotation(frm, cdt, cdn);
        });

        frm.fields_dict.items.grid.wrapper.on('mouseleave', 'input[data-fieldname="uom"][data-doctype="Quotation Item"]', function (e) {
            console.log("Mouse left the UOM field");
            shs_quotation_calculation(frm, cdt, cdn);
        });

        frm.fields_dict.items.grid.wrapper.on('focus', 'input[data-fieldname="item_name"][data-doctype="Quotation Item"]', function (e) {
            console.log("Focusing with keyboard cursor through TAB on the Item Name Field");
            each_item_quotation(frm, cdt, cdn);
            catizacion_otros_impuestos_fila(frm, cdt, cdn);
        });
        frm.fields_dict.items.grid.wrapper.on('blur focusout', 'input[data-fieldname="qty"][data-doctype="Quotation Item"]', function (e) {
            console.log("Blurring or focusing out from the Quantity Field");
            each_item_quotation(frm, cdt, cdn);
        });

        frm.fields_dict.items.grid.wrapper.on('mouseleave', 'input[data-fieldname="qty"][data-doctype="Quotation Item"]', function (e) {
            console.log("Mouse leaving from the Quantity Field");
            each_item_quotation(frm, cdt, cdn);
            shs_quotation_calculation(frm, cdt, cdn);
        });

        frm.fields_dict.items.grid.wrapper.on('blur focusout', 'input[data-fieldname="conversion_factor"][data-doctype="Quotation Item"]', function (e) {
            console.log("Blurring or focusing out from the Conversion Factor Field");

            each_item_quotation(frm, cdt, cdn);
            cur_frm.refresh_field("conversion_factor");
        });

        frm.fields_dict.items.grid.wrapper.on('keyup mouseleave focusout', 'input[data-fieldname="conversion_factor"][data-doctype="Quotation Item"]', function (e) {
            console.log("Key up, mouse leave or focus out from the Conversion Factor Field");

            shs_quotation_calculation(frm, cdt, cdn);
            each_item_quotation(frm, cdt, cdn);
            cur_frm.refresh_field("conversion_factor");
        });
        frm.fields_dict.items.grid.wrapper.on('blur', 'input[data-fieldname="rate"][data-doctype="Quotation Item"]', function (e) {
            console.log("Blurring from the Rate Field");
        });

        cur_frm.fields_dict.customer.$input.on("keyup", function (evt) {
            console.log("Se acaba de soltar una tecla del campo customer");
            shs_quotation_calculation(frm, cdt, cdn);
            each_item_quotation(frm, cdt, cdn);
            refresh_field('qty');
        });

        cur_frm.fields_dict.customer.$input.on("mouseleave blur focusout", function (evt) {
            console.log("Salió del campo customercon mouseleave, blur, focusout");
            shs_quotation_calculation(frm, cdt, cdn);
        });

        cur_frm.fields_dict.taxes_and_charges.$input.on("focusout", function (evt) {
            console.log("Campo taxes and charges perdió el enfoque via focusout");
            shs_quotation_calculation(frm, cdt, cdn);
            catizacion_otros_impuestos_fila(frm, cdt, cdn);
        });
    },
    refresh: function refresh(frm, cdt, cdn) {
        frm.add_custom_button("UOM Recalculation", function () {
            frm.doc.items.forEach(function (item) {
                console.log("item contains: " + item);

                shs_quotation_calculation(frm, "Sales Invoice Item", item.name);
            });
        });
    },
    facelec_qt_nit: function facelec_qt_nit(frm, cdt, cdn) {
        valNit(frm.doc.facelec_qt_nit, frm.doc.customer, frm);
    },
    discount_amount: function discount_amount(frm, cdt, cdn) {},
    customer: function customer(frm, cdt, cdn) {},
    before_save: function before_save(frm, cdt, cdn) {
        each_item_quotation(frm, cdt, cdn);
        catizacion_otros_impuestos_fila(frm, cdt, cdn);
    }
});

frappe.ui.form.on("Quotation Item", {
    items_add: function items_add(frm, cdt, cdn) {},
    items_move: function items_move(frm, cdt, cdn) {},
    before_items_remove: function before_items_remove(frm, cdt, cdn) {
        frm.doc.items.forEach(function (item_row_1, index_1) {
            if (item_row_1.name == cdn) {
                totalizar_valores_quotation(frm, cdn, item_row_1.facelec_qt_tax_rate_per_uom_account);
            }
        });
    },
    items_remove: function items_remove(frm, cdt, cdn) {},
    item_code: function item_code(frm, cdt, cdn) {
        each_item_quotation(frm, cdt, cdn);
    },
    qty: function qty(frm, cdt, cdn) {
        shs_quotation_calculation(frm, cdt, cdn);
    },
    uom: function uom(frm, cdt, cdn) {
        console.log("The unit of measure field was changed and the code from the trigger was run");
    },
    conversion_factor: function conversion_factor(frm, cdt, cdn) {
        console.log("El disparador de factor de conversión se corrió.");
        shs_quotation_calculation(frm, cdt, cdn);
    },
    facelec_qt_tax_rate_per_uom_account: function facelec_qt_tax_rate_per_uom_account(frm, cdt, cdn) {},
    rate: function rate(frm, cdt, cdn) {
        shs_quotation_calculation(frm, cdt, cdn);
    }
});

function pi_each_item(frm, cdt, cdn) {
    frm.doc.items.forEach(function (item) {
        shs_purchase_invoice_calculation(frm, "Purchase Invoice Item", item.name);
        pi_insertar_fila_otro_impuesto(frm, "Purchase Invoice Item", item.name);
    });
}

function pi_sumatoria_por_cuenta_items(frm, tax_account) {
    var total_sumatoria = 0;

    $.each(frm.doc.items || [], function (i, d) {
        if (d.facelec_p_tax_rate_per_uom_account === tax_account) {
            total_sumatoria += flt(d.facelec_p_other_tax_amount);
        };
    });

    return total_sumatoria;
}

function pi_sumatoria_otros_impuestos_por_cuenta(frm, cdt, cdn) {
    frm.doc.items.forEach(function (item_row_1, index_1) {
        if (item_row_1.name === cdn) {
            if (item_row_1.facelec_p_tax_rate_per_uom_account) {

                frm.doc.shs_pi_otros_impuestos.forEach(function (tax_row_2, index_2) {

                    if (tax_row_2.account_head === item_row_1.facelec_p_tax_rate_per_uom_account) {
                        var totalizador = 0;
                        totalizador = pi_sumatoria_por_cuenta_items(frm, tax_row_2.account_head);
                        cur_frm.doc.shs_pi_otros_impuestos[index_2].total = totalizador;
                        pi_total_de_otros_impuestos(frm);
                    }
                });
            }
        }
    });
}

function pi_total_de_otros_impuestos(frm) {
    var total_tax = 0;

    $.each(frm.doc.shs_pi_otros_impuestos || [], function (i, d) {
        if (d.account_head) {
            total_tax += flt(d.total);
        };
    });

    cur_frm.set_value('shs_pi_total_otros_imp_incl', total_tax);
    frm.refresh_field("shs_pi_total_otros_imp_incl");
}

function pi_insertar_fila_otro_impuesto(frm, cdt, cdn) {
    var shs_otro_impuesto = 0;

    frm.doc.items.forEach(function (item_row_i, indice) {
        if (item_row_i.name === cdn) {
            shs_otro_impuesto = item_row_i.facelec_p_other_tax_amount;

            var cuenta = item_row_i.facelec_p_tax_rate_per_uom_account;


            frm.refresh_field('items');
            frm.refresh_field('conversion_factor');

            if (cuenta) {
                if (!pi_buscar_cuenta(frm, cuenta)) {

                    frappe.model.add_child(cur_frm.doc, "Otros Impuestos Factura Electronica", "shs_pi_otros_impuestos");

                    cur_frm.refresh_field('items');

                    frm.doc.shs_pi_otros_impuestos.forEach(function (tax_row, index) {
                        if (tax_row.account_head === undefined) {
                            cur_frm.doc.shs_pi_otros_impuestos[index].account_head = cuenta;
                            cur_frm.doc.shs_pi_otros_impuestos[index].total = shs_otro_impuesto;

                            cur_frm.refresh_field("shs_pi_otros_impuestos");

                            pi_sumatoria_otros_impuestos_por_cuenta(frm, cdt, cdn);
                            cur_frm.refresh_field("shs_pi_otros_impuestos");
                        }
                    });
                } else {
                    pi_sumatoria_otros_impuestos_por_cuenta(frm, cdt, cdn);
                    cur_frm.refresh_field("shs_pi_otros_impuestos");
                }
            }
        }
    });
}

function pi_total_otros_impuestos_eliminacion(frm, tax_account_n, otro_impuesto) {
    frm.doc.items.forEach(function (item_row, i1) {
        if (item_row.facelec_p_tax_rate_per_uom_account === tax_account_n) {
            var total = pi_sumatoria_por_cuenta_items(frm, tax_account_n) - otro_impuesto;

            frm.doc.shs_pi_otros_impuestos.forEach(function (tax_row, i2) {
                if (tax_row.account_head === tax_account_n) {
                    cur_frm.doc.shs_pi_otros_impuestos[i2].total = total;
                    cur_frm.refresh_field("shs_pi_otros_impuestos");
                    pi_total_de_otros_impuestos(frm);
                    cur_frm.refresh_field("shs_pi_otros_impuestos");

                    if (tax_row.total === 0) {
                        cur_frm.doc.shs_pi_otros_impuestos.splice(cur_frm.doc.shs_pi_otros_impuestos[i2], 1);
                        cur_frm.refresh_field("shs_pi_otros_impuestos");
                    }
                }
            });
        }
    });
}

function pi_buscar_cuenta(frm, cuenta_b) {

    var estado = false;

    $.each(frm.doc.shs_pi_otros_impuestos || [], function (i, d) {
        if (d.account_head === cuenta_b) {
            estado = true;
        }
    });

    return estado;
}

function shs_purchase_invoice_calculation(frm, cdt, cdn) {
    cur_frm.refresh_fields();
    var this_company_sales_tax_var = cur_frm.doc.taxes[0].rate;

    var this_row_amount = 0;
    var this_row_stock_qty = 0;
    var this_row_tax_rate = 0;
    var this_row_tax_amount = 0;
    var this_row_taxable_amount = 0;

    frm.doc.items.forEach(function (item_row, index) {

        if (item_row.name == cdn) {
            this_row_amount = item_row.qty * item_row.rate;
            this_row_stock_qty = item_row.qty * item_row.conversion_factor;
            this_row_tax_rate = item_row.facelec_p_tax_rate_per_uom;
            this_row_tax_amount = this_row_stock_qty * this_row_tax_rate;
            this_row_taxable_amount = this_row_amount - this_row_tax_amount;

            frm.doc.items[index].facelec_p_other_tax_amount = item_row.facelec_p_tax_rate_per_uom * (item_row.qty * item_row.conversion_factor);

            frm.doc.items[index].facelec_p_amount_minus_excise_tax = item_row.qty * item_row.rate - item_row.qty * item_row.conversion_factor * item_row.facelec_p_tax_rate_per_uom;

            if (item_row.facelec_p_is_fuel) {
                frm.doc.items[index].facelec_p_gt_tax_net_fuel_amt = item_row.facelec_p_amount_minus_excise_tax / (1 + this_company_sales_tax_var / 100);
                frm.doc.items[index].facelec_p_sales_tax_for_this_row = item_row.facelec_p_gt_tax_net_fuel_amt * (this_company_sales_tax_var / 100);

                total_fuel = 0;
                $.each(frm.doc.items || [], function (i, d) {
                    if (d.facelec_p_is_fuel == true) {
                        total_fuel += flt(d.facelec_p_gt_tax_net_fuel_amt);
                    };
                });
                frm.doc.facelec_p_gt_tax_fuel = total_fuel;
            };

            if (item_row.facelec_p_is_good) {
                frm.doc.items[index].facelec_p_gt_tax_net_goods_amt = item_row.facelec_p_amount_minus_excise_tax / (1 + this_company_sales_tax_var / 100);
                frm.doc.items[index].facelec_p_sales_tax_for_this_row = item_row.facelec_p_gt_tax_net_goods_amt * (this_company_sales_tax_var / 100);

                total_goods = 0;
                $.each(frm.doc.items || [], function (i, d) {
                    if (d.facelec_p_is_good == true) {
                        total_goods += flt(d.facelec_p_gt_tax_net_goods_amt);
                    };
                });
                frm.doc.facelec_p_gt_tax_goods = total_goods;
            };

            if (item_row.facelec_p_is_service == 1) {
                frm.doc.items[index].facelec_p_gt_tax_net_services_amt = item_row.facelec_p_amount_minus_excise_tax / (1 + this_company_sales_tax_var / 100);
                frm.doc.items[index].facelec_p_sales_tax_for_this_row = item_row.facelec_p_gt_tax_net_services_amt * (this_company_sales_tax_var / 100);

                total_servi = 0;
                $.each(frm.doc.items || [], function (i, d) {
                    if (d.facelec_p_is_service == true) {
                        total_servi += flt(d.facelec_p_gt_tax_net_services_amt);
                    };
                });
                frm.doc.facelec_p_gt_tax_services = total_servi;
            };

            full_tax_iva = 0;
            $.each(frm.doc.items || [], function (i, d) {
                full_tax_iva += flt(d.facelec_p_sales_tax_for_this_row);
            });
            frm.doc.facelec_p_total_iva = full_tax_iva;
        };
    });
}

frappe.ui.form.on("Purchase Invoice", {
    onload_post_render: function onload_post_render(frm, cdt, cdn) {
        frm.fields_dict.items.grid.wrapper.on('click focusout blur', 'input[data-fieldname="item_code"][data-doctype="Purchase Invoice Item"]', function (e) {
            shs_purchase_invoice_calculation(frm, cdt, cdn);
            pi_each_item(frm, cdt, cdn);
        });

        frm.fields_dict.items.grid.wrapper.on('click', 'input[data-fieldname="uom"][data-doctype="Purchase Invoice Item"]', function (e) {
            pi_each_item(frm, cdt, cdn);
        });

        frm.fields_dict.items.grid.wrapper.on('blur focusout', 'input[data-fieldname="uom"][data-doctype="Purchase Invoice Item"]', function (e) {
            pi_each_item(frm, cdt, cdn);
        });

        frm.fields_dict.items.grid.wrapper.on('mouseleave', 'input[data-fieldname="uom"][data-doctype="Purchase Invoice Item"]', function (e) {
            shs_purchase_invoice_calculation(frm, cdt, cdn);
        });

        frm.fields_dict.items.grid.wrapper.on('focus', 'input[data-fieldname="item_name"][data-doctype="Purchase Invoice Item"]', function (e) {
            pi_each_item(frm, cdt, cdn);
            pi_insertar_fila_otro_impuesto(frm, cdt, cdn);
        });

        frm.fields_dict.items.grid.wrapper.on('blur focusout', 'input[data-fieldname="qty"][data-doctype="Purchase Invoice Item"]', function (e) {
            pi_each_item(frm, cdt, cdn);
        });

        frm.fields_dict.items.grid.wrapper.on('mouseleave', 'input[data-fieldname="qty"][data-doctype="Purchase Invoice Item"]', function (e) {
            pi_each_item(frm, cdt, cdn);
            shs_purchase_invoice_calculation(frm, cdt, cdn);
        });

        frm.fields_dict.items.grid.wrapper.on('blur focusout', 'input[data-fieldname="conversion_factor"][data-doctype="Purchase Invoice Item"]', function (e) {
            pi_each_item(frm, cdt, cdn);
            cur_frm.refresh_field("conversion_factor");
        });

        frm.fields_dict.items.grid.wrapper.on('keyup mouseleave focusout', 'input[data-fieldname="conversion_factor"][data-doctype="Purchase Invoice Item"]', function (e) {
            shs_purchase_invoice_calculation(frm, cdt, cdn);
            pi_each_item(frm, cdt, cdn);
            cur_frm.refresh_field("conversion_factor");
        });

        cur_frm.fields_dict.supplier.$input.on("keyup", function (evt) {
            shs_purchase_invoice_calculation(frm, cdt, cdn);
            pi_each_item(frm, cdt, cdn);
            refresh_field('qty');
        });

        cur_frm.fields_dict.supplier.$input.on("mouseleave blur focusout", function (evt) {
            shs_purchase_invoice_calculation(frm, cdt, cdn);
        });

        cur_frm.fields_dict.items.$wrapper.on("click", function (evt) {
            pi_each_item(frm, cdt, cdn);
        });

        cur_frm.fields_dict.taxes_and_charges.$input.on("focusout", function (evt) {
            shs_purchase_invoice_calculation(frm, cdt, cdn);
            pi_insertar_fila_otro_impuesto(frm, cdt, cdn);
        });
    },
    facelec_nit_fproveedor: function facelec_nit_fproveedor(frm, cdt, cdn) {
        valNit(frm.doc.facelec_nit_fproveedor, frm.doc.supplier, frm);
    },
    discount_amount: function discount_amount(frm, cdt, cdn) {
        tax_before_calc = frm.doc.facelec_total_iva;;

        discount_amount_net_value = frm.doc.discount_amount / (1 + cur_frm.doc.taxes[0].rate / 100);

        if (discount_amount_net_value == NaN || discount_amount_net_value == undefined) {} else {
            discount_amount_tax_value = discount_amount_net_value * (cur_frm.doc.taxes[0].rate / 100);

            frm.doc.facelec_total_iva = frm.doc.facelec_total_iva - discount_amount_tax_value;
        }
    },
    before_save: function before_save(frm, cdt, cdn) {
        pi_each_item(frm, cdt, cdn);
        pi_insertar_fila_otro_impuesto(frm, cdt, cdn);
    }
});

frappe.ui.form.on("Purchase Invoice Item", {
    before_items_remove: function before_items_remove(frm, cdt, cdn) {
        frm.doc.items.forEach(function (item_row_1, index_1) {
            if (item_row_1.name == cdn) {
                pi_total_otros_impuestos_eliminacion(frm, item_row_1.facelec_p_tax_rate_per_uom_account, item_row_1.facelec_p_other_tax_amount);
            }
        });
    },
    items_remove: function items_remove(frm, cdt, cdn) {

        fix_gt_tax_fuel = 0;
        fix_gt_tax_goods = 0;
        fix_gt_tax_services = 0;
        fix_gt_tax_iva = 0;

        $.each(frm.doc.items || [], function (i, d) {
            fix_gt_tax_fuel += flt(d.facelec_p_gt_tax_net_fuel_amt);
            fix_gt_tax_goods += flt(d.facelec_p_gt_tax_net_goods_amt);
            fix_gt_tax_services += flt(d.facelec_p_gt_tax_net_services_amt);
            fix_gt_tax_iva += flt(d.facelec_p_sales_tax_for_this_row);
        });

        cur_frm.set_value("facelec_p_gt_tax_fuel", fix_gt_tax_fuel);
        cur_frm.set_value("facelec_p_gt_tax_goods", fix_gt_tax_goods);
        cur_frm.set_value("facelec_p_gt_tax_services", fix_gt_tax_services);
        cur_frm.set_value("facelec_p_total_iva", fix_gt_tax_iva);
    },
    item_code: function item_code(frm, cdt, cdn) {
        this_company_sales_tax_var = cur_frm.doc.taxes[0].rate;

        refresh_field('qty');
    },
    qty: function qty(frm, cdt, cdn) {
        shs_purchase_invoice_calculation(frm, cdt, cdn);
    },
    uom: function uom(frm, cdt, cdn) {},
    conversion_factor: function conversion_factor(frm, cdt, cdn) {
        shs_purchase_invoice_calculation(frm, cdt, cdn);
    },
    rate: function rate(frm, cdt, cdn) {
        shs_purchase_invoice_calculation(frm, cdt, cdn);
    }
});

console.log("Hello world from Purchase Receipt");

console.log("Hello world from Purchase Order");

console.log("Hello world from Purchase Quotation");